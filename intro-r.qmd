# ready fo*R* data {#sec-intro-r}

```{r}
#| echo: false
source("./_common.R")
```

This chapter provides a broad overview of the R language that will get you programming right away. The tool I recommend is [Posit Cloud](https://posit.cloud/) which is a free cloud coding environment for R and Python users. A step-by-step guide will be provided. Once the setup is complete, some basic R programming and data types are introduced. For Python programming, please see the next chapter.


<!-- ## Let's get equipped with our tools! -->

## Computing Environment

### Posit cloud

<!-- <span style="color:blue"> **Posit Cloud** </span> -->

:::: {.columns}

::: {.column width="33%"}

```{r}
#| out-width: 80%
#| fig-align: center
knitr::include_graphics("./images/img-intro/posit.png")
```

:::

::: {.column width="34%"}

<br>

```{r}
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("images/img-intro/rstudio-logo.png")
```

:::

::: {.column width="33%"}

```{r}
#| out-width: 50%
#| fig-align: center
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/3/38/Jupyter_logo.svg")
```

:::

::::

R and Python are popular programming languages for statistical analysis and data science.

[Posit Cloud](https://posit.cloud/) offers a could computing environment that lets you access data science tools right in your browser, and no installation or complex configuration is required.

In Posit Cloud, you can generate a data science project using the integrated development environment (IDE) [RStudio](https://posit.co/products/open-source/rstudio/) or [JupyterLab/Jupyter Notebook](https://jupyter.org/). These IDEs are software for efficiently writing computer programs. For R users, RStudio is recommended because it provides many useful functionalities specifically for R programming language.

<!-- <span style="color:blue"> **R and Posit** </span> -->

<!-- ::::{.columns} -->
<!-- :::{.column width="50%"} -->

<!-- ```{r echo=FALSE, out.width="45%",fig.align="center"} -->
<!-- knitr::include_graphics("./images/img-intro/r-logo.png") -->
<!-- ``` -->

<!-- - [R](https://www.r-project.org/): *free open-source* **programming language** `r emoji('chart_with_upwards_trend')` -->
<!-- - R is mainly for doing *data science* with strength in *statistical modeling, computing and data visualization* -->
<!-- ::: -->

<!-- :::{.column width="50%"} -->
<!-- ```{r echo=FALSE, out.width="35%",fig.align="center"} -->
<!-- knitr::include_graphics("./images/img-intro/posit.png") -->
<!-- ``` -->
<!-- - [Posit](https://posit.co/): interface for R, Python, etc. called an **IDE** (integrated development environment), e.g. *"I write R code in the RStudio IDE"*. -->
<!-- - Posit is not a requirement for programming with R, but it's commonly used by R developers, statisticians and data scientists. -->
<!-- ::: -->
<!-- :::: -->

<!-- -------------------------------------------------------------------- -->

<!-- <span style="color:blue"> **The R User Interface** </span> -->

<!-- - RStudio IDE includes -->
<!--   + a viewable environment, a file browser, data viewer and a plotting pane. `r emoji('+1')` -->
<!--   + also features integrated help, syntax highlighting, context-aware tab completion and more! `r emoji('smile')` -->

<!-- ::::{.columns} -->
<!-- :::{.column width="40%"} -->

<!-- <center> -->
<!-- **R** -->
<!-- </center> -->

<!-- ```{r echo=FALSE, out.width="80%",fig.align="center"} -->
<!-- #| label: fig-R-console -->
<!-- #| fig-cap: R Console -->
<!-- knitr::include_graphics("./images/img-intro/r_windows.jpg") -->
<!-- ``` -->
<!-- ::: -->

<!-- :::{.column width="60%"} -->

<!-- <center> -->
<!-- **RStudio** -->
<!-- </center> -->

<!-- ```{r echo=FALSE, out.width="100%",fig.align="center"} -->
<!-- #| label: fig-R-studio-console -->
<!-- #| fig-cap: RStudio Console -->
<!-- knitr::include_graphics("./images/img-intro/rstudio_ubuntu.png") -->
<!-- ``` -->
<!-- ::: -->
<!-- :::: -->

<!-- --------------------------------------------------------------------- -->

<!-- <span style="color:blue"> `r emoji('cloud')` **Posit Cloud - Data Science w/o hardware hassles** </span> -->

One of the advantages of using Posit Cloud is that you can implement R/Python programs *without* installing R/Python and the IDE locally on your laptop! Everything can be done in the cloud using web browsers. In other words, you can get assess to your code and any files in your projects on any computer. Also, Posit Cloud lets you do, share and learn data science *online for free*! Moreover, Posit Cloud prepares everything you need for doing statistics and data science. You don't need to worry about any installation or configuration issues that you may encounter when you are trying to get your local machine ready for programming in R or Python. Go to https://posit.cloud/ and log in. Then we are all set.

::::{.columns}

:::{.column width="50%"}

`r emoji('disappointed')` **Getting everything ready locally: Lots of friction**

- Download and install R/Python
- Download and install IDE
- Install wanted R/Python packages:
  - tidymodels
  - tidyverse 
  - NumPy
  - ...
- Load these packages
- Download and install tools like Git

:::

:::{.column width="50%"}

`r emoji('nerd_face')` **Posit Cloud: Much less friction** 

```{r}
knitr::include_graphics("./images/img-intro/cloud.png")
```

- Go to https://posit.cloud/
- Log in

```{r hello-r, eval=FALSE}
>hello R!
```

:::

::::

-----------------------------------------------------------------------

Please follow the steps below to sign up Posit Cloud.


<span style="color:blue"> **Sign up Posit Cloud** </span>

:::{.callout-note icon=false}

## Lab Time!

- ***Step 1***: In the Posit website [https://posit.co/](https://posit.co/), choose **Products > Posit Cloud** as shown below.
:::

```{r}
#| label: fig-posit-web
#| fig-cap: Posit website
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/posit-cloud_25.png")
```

:::{.callout-note icon=false}

## Lab Time!

- ***Step 2***: Click **GET STARTED**. 
- ***Step 3***: Choose tab **Free** then **Sign Up**.

I recommend signing up with your *GitHub* if you have one or use your *Marquette email address*. Currently the free version has 25 compute hours per month. You are encouraged to choose *Plus* version for more hours (75 hours) usage per month.


:::

:::: {.columns}

::: {.column width="30%"}

```{r}
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/landing-1-posit.png")
```

:::

::: {.column width="70%"}

```{r}
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/posit-free-plan_25.png")
```

:::

::::

--------------------------------------------------------------------------

<span style="color:blue"> **New Projects** </span>

Once you have done the registration and log in successfully, you should be able to see a page like the one below. To get a IDE and create a new project, click **New Project** in the top right corner as shown above.


:::: {.columns}

::: {.column width="85%"}

```{r}
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/new-project-cloud-posit.png")
```

:::

::: {.column width="15%"}

```{r}
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/new-project-option.png")
```

:::

::::


-------------------------------------------------------------------

<span style="color:blue"> **Workspaces** </span>

When you create an account on Posit Cloud, you get a **workspace** of your own. You can add a new workspace (click **+ New Space** in sidebar) and control its permissions.

```{r}
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/posit-cloud-hide-sidebar.png")
```

--------------------------------------------------------------------

<span style="color:blue"> **First R Code in Posit Cloud!** </span>

We will be using RStudio as our main IDE for coding in R.

:::{.callout-note icon=false}

## Lab Time!

- In the bar, click the desired workspace.
- Click **New Project > New RStudio Project** to get into the IDE.
- Click Untitled Project and give your project a nice name, **math-4720** for example.
- In the Console pane, write your first R code: a string **`"Hello WoRld!"`** or math **`2 + 4`**.
- Change the editor theme: **Tools > Global Options > Appearance**

:::

```{r}
#| label: fig-theme
#| fig-cap: How to change the editor theme
knitr::include_graphics("./images/img-intro/rcloud_project.png")
```

--------------------------------------------------------------------------

<span style="color:blue"> **More Tips** </span>

For more help, read the [Posit Cloud guide](https://posit.cloud/learn/guide).

```{r}
#| label: fig-guide
#| fig-cap: Posit Cloud Guide
#| out-width: 70%
#| fig-align: center
knitr::include_graphics("./images/img-intro/posit-cloud-guide.png")
```

### Working in RStudio

<span style="color:blue"> **Panes** </span>

In RStudio, there are 4 main panes, source pane, console pane, pane for environment/history and version control, and the pane for files, plots, packages and help page. Source pane is where you write your code. Your code will not be evaluated or interpreted until you "run" them or source them to the console. When your code is long, write your code in R scripts in the Source, so that the code can be saved and reused later. You type code into the Console if the code is short or you want to do some quick calculations or analysis. The code you type in the Console will not be saved in a script. In the environment/history, you can check any objects you create in the R environment and you can also view your command history in the history tab. You will see how the pane for file/plot/package/help can be used as we learn more about RStudio.


```{r}
#| label: fig-panes
#| fig-cap: "RStudio Panes. Source: https://bookdown.org/ndphillips/YaRrr/the-four-rstudio-windows.html"
knitr::include_graphics("./images/img-intro/rstudio_panes.png")
```

-----------------------------------------------------------------------

<span style="color:blue"> **Source Pane** </span>

<span style="color:red"> ***R Script*** </span>

An R script is a **.R** file that contains R code. To create an R script, go to **File > New > R Script**, or click the green-plus icon on the top left corner and select R Script.

Here you see in this r script, I create two objects `x` and `y`, and I also load the data `mtcars` into R environment. Don't worry if you don't know these syntax. You will learn basic R syntax and programming later.

```{r}
#| label: fig-R-script
#| fig-cap: Creating an R script
#| out-width: 100%
knitr::include_graphics("./images/img-intro/script.png")
```


<span style="color:red"> ***Run Code*** </span>

- <span style="color:blue"> **Run** </span>: run the **current line** or **selection of code**. 
  + `ctrl + enter` (Win) or `cmd + enter` (Mac)
- <span style="color:blue"> **Icon to the right of Run** </span>: re-run the **previous** code. 
  + `alt + ctrl + p` (Win) or `option + cmd + p` (Mac)
- <span style="color:blue"> **Source** </span>: run **all** the code in the R script.
  + `shift + ctrl + s` (Win) or `shift + cmd + s` (Mac)
- <span style="color:blue"> **Source with Echo** </span>: run **all** the code in the R script *with the code printed in the console*.
  + `shift + ctrl + enter` (Win) or `shift + cmd + enter` (Mac)

```{r}
#| label: fig-running-code
#| fig-cap: Running R Code
knitr::include_graphics("./images/img-intro/script.png")
```

--------------------------------------------------------------------

<span style="color:blue"> **Environment Tab** </span>

The (global) environment is where we are currently working. Anything created or imported into the current R/Python session is stored in our environment and shown in the **Environment** tab. After we run the R script from @fig-R-script, the following objects are stored in the environment:

  + Data set `mtcars`
  + Object `x` storing *integer* values 1 to 10.
  + Object `y` storing three *numeric* values 3, 5, 9.

```{r}
#| label: fig-environment
#| fig-cap: Environment Pane
knitr::include_graphics("./images/img-intro/environment.png")
```


-------------------------------------------------------------------

<span style="color:blue"> **History Tab** </span>

The **History** tab keeps a record of all previous commands.

  + <span style="color:blue">**Save icon**</span>: save all history to a file
  + <span style="color:blue">**To Console**</span>: send the selected commands to the console.
  + <span style="color:blue">**To Source** </span>: inserted the selected commands into the current script.

```{r}
#| label: history
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/history.png")
```


:::{.callout-tip}

In the console pane, use `r emoji('arrow_up')` to show the previous commands.

:::


----------------------------------------------------------------

<span style="color:blue"> **Help** </span>

What if you don't know how a function works or what a data set is about `r emoji('question')` 

`r emoji('point_right')` Simply type `?` followed by the data name or function name to get more information.

```{r}
#| echo: true
#| eval: false

?mean
?mtcars
```

:::{.callout-note icon=false}
## What does the function `mean()` do? What is the size of mpg?
:::

A document will show up in the **Help** tab in the bottom-right pane, teaching you how to use the function or explaining the data set. An example is shown for the `mpg` data set in @fig-help-tab below. 

```{r}
#| label: fig-help-tab
#| fig-cap: Document explaining the mpg data set in the Help tab
#| out-width: 90%
knitr::include_graphics("./images/img-intro/mpg_help.png")
```

----------------------------------------------------------------

:::{.callout-warning icon=false}

## You can do it!

- What is the size of `mtcars` data? 
- Type `mtcars` and hit enter in the console to see the data set.
- Discuss the data type of each variable.
- Type `mtcars[, 1]` and hit enter in the console and discuss what you see.

:::





### Install R and RStudio to your computer

If you would like to install R and RStudio to your local computer, the step-by-step procedure is provided in this section. Free to skip it and go to the next section if Posit Cloud works perfectly for you.


<span style="color:blue"> **Install R** </span>

<span style="color:red"> ***Step 1*** </span>

- Go to <https://cloud.r-project.org>.
- Click Download R for [*your operating system*].

![Downloading R](./images/img-intro/r_download.png){#fig-download}

<span style="color:red"> ***Step 2*** </span>

- If you are a Mac user, you should see the page shown below in @fig-windows-mac. 
- You are recommended to download and install the *latest* version of R (now **R-4.3.1**) if your OS version allows to do so. 
- Otherwise, choose a previous version, such as R-3.6.3. 

![Downloading R for Mac](./images/img-intro/r_version.png){#fig-windows-mac}

- If you are a Windows user, after clicking Download R for Windows, please choose **base** version and then click **Download R-4.3.1 for Windows**.

<span style="color:red"> ***Step 3*** </span>

- Once you successfully install R, when you open R, you should be able to see the following R terminal or console:

::::{.columns}

:::{.column width="49%"}

<center>
**Windows**
</center>

![Windows R Console](./images/img-intro/r_windows.jpg){#fig-windows}
:::

:::{.column width="2%"}

:::

:::{.column width="49%"}

<center>
**Mac**
</center>

![Mac R Console](./images/img-intro/r_mac.png){#fig-mac}
:::

::::

<span style="color:red"> ***Welcome to the R World!*** </span> 

Now you are ready to use R for statistical computation. You can use R like a calculator. After typing your formula, simply hit enter and you get the answer! 

```{r}
#| echo: true
1 + 2
30 * 42 / 3
log(5) - exp(3) * sqrt(7)
```

--------------------------------------------------------------------

<span style="color:blue"> **Install RStudio** </span>  

<span style="color:red"> ***Step 1*** </span>

- In the [Posit website](https://posit.co/), please choose **Products > RStudio IDE** as shown in @fig-posit-web.


<!-- ![R Studio Website](./images/img-intro/rstudio.png){#fig-website} -->

<span style="color:red"> ***Step 2*** </span>

- In the **RStudio Desktop** tab, Click **DOWNLOAD RSTUDIO**.

```{r}
#| label: fig-download-desktop
#| fig-cap: Downloading RStudio Desktop
knitr::include_graphics("./images/img-intro/rstudio_desktop_posit.png")
```


<span style="color:red"> ***Step 3*** </span>

The page will automatically detect your operating system and recommend a version of RStudio that works the best for you that is usually the latest version. 

- Click **DOWNLOAD RSTUDIO DESKTOP FOR [Your OS version]** (@fig-R-latest).
- Follow the standard installation steps and you should get the software. 
- Make sure that R is installed successfully on your computer before you download and install RStudio.

<!-- :::{.callout-note icon=false} -->
<!-- The latest version of RStudio is **2022.07.1+554**. -->
<!-- ::: -->

```{r}
#| label: fig-R-latest
#| fig-cap: Latest version of RStudio
knitr::include_graphics("./images/img-intro/rstudio_download_posit.png")
```
<!-- ![](./images/img-intro/rstudio_download.png) -->

<span style="color:red"> ***RStudio Screen*** </span>

When you open RStudio, you should see something similar to @fig-RStudio-screen below. If you do, congratulations! You can now do any statistical computation in R using RStudio locally on your computer. 

```{r}
#| label: fig-RStudio-screen
#| fig-cap: R Studio Screen
knitr::include_graphics("./images/img-intro/rstudio_ubuntu.png")
```


### Positron

```{r}
#| label: positron
#| fig-cap: Positron logo.
knitr::include_graphics("./images/img-intro/positron.png")
```

[Positron](https://positron.posit.co/) is a new [data science IDE](https://posit.co/products/ide/positron/) built by Posit PBC. If you are familiar with [Visual Studio Code (VS Code)](https://code.visualstudio.com/), JupyterLab, or usually write multiple languages in your data science projects, Positron might be a good fit for you.

Positron could integrate Python and R better, and provide more functionality that boosts efficiency of data analysis and project development, but it is not currently supported by Posit Cloud. If you prefer using Positron, you need to download its desktop version to your machine.


## Basic R 


We are already equipped with the tools we need for doing statistics in this course. Now it's time to program in R. We are going to go through basic R syntax and its commonly used data structures. This introduction is a must because we will be using R throughout the book. If you are already familiar with basic R syntax, feel free to move to the next chapter.
<!-- ------------------------------------------------------------------ -->

### R Packages `r emoji('package')`

<!-- <span style="color:blue"> **R Packages `r emoji('package')`** </span> -->

R packages are a collection of reusable R functions, code and data. When we start an R session, only built-in packages like **base**, **stats**, **graphics**, etc. are available. Installing packages is an easy way to get access to other data and functions. Currently there are about 20 thousand packages on [CRAN](https://cran.r-project.org/) (The Comprehensive R Archive Network). In this book, we won't use many packages because the basic R functions can sufficiently solve our statistics problems. Not really need more sophisticated functions in other packages.

<!-- <center> -->
<!-- ![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/readr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/readxl.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/haven.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/tidyverse.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidyr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/dplyr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/sparklyr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png){width="150"}![](https://raw.githubusercontent.com/slowkow/ggrepel/master/man/figures/logo.svg){width="150"}![](https://raw.githubusercontent.com/thomasp85/gganimate/master/man/figures/logo.png){width="150"}![](https://raw.githubusercontent.com/sjmgarnier/viridis/master/hex_logo/viridis.svg){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tibble.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/gt.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/purrr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/lubridate.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/stringr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/rvest.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/rmarkdown.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/knitr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/quarto.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/shiny.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/devtools.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/flexdashboard.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/reticulate.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/broom.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidymodels.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidyposterior.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidypredict.png){width="150"}[](https://github.com/rstudio/hex-stickers)! -->
<!-- </center> -->

<!-- <br> -->

<span style="color:red"> ***Installing R Packages*** </span>

:::: {.columns}

::: {.column width="70%"}

To install a package, such as the [**ggplot2**](https://ggplot2.tidyverse.org/) package, we use the command

```{r}
#| eval: false
#| echo: !expr c(5)
# install.packages("car", repos = "http://cran.us.r-project.org")
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
install.packages("ggplot2")
# install.packages("car")
```

A different option in the right-bottom pane is **Packages > Install**.

```{r}
#| out-width: 100%
knitr::include_graphics("./images/img-intro/pkg_install.png")
```

:::

::: {.column width="30%"}

<br>

<p align="center">
  <img src="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png" style="width:240px;" />
</p>

:::

::::

<span style="color:red"> ***Loading R Packages `r emoji('package')`*** </span>

<!-- :::: {.columns} -->
<!-- ::: {.column width="49%"} -->

To use any function or data in `ggplot2`, we write `ggplot2::` followed by the name of the function or data.

```{r}
#| echo: true
#| eval: false
ggplot2::ggplot(ggplot2::mpg, 
                ggplot2::aes(x = displ, y = hwy, 
                             colour = class)) + 
    ggplot2::geom_point()
```


:::{.callout-note icon=false}

## What happens when you run the code shown below?
```{r}
#| echo: true
#| eval: false
ggplot(mpg, aes(x = displ, y = hwy, 
                colour = class)) + 
    geom_point()
```

:::

You should get an error message like

    Error in ggplot(mpg, aes(x = displ, y = hwy, colour = class)) :
    could not find function "ggplot"
  
<!-- ::: -->

<!-- :::{.column width="2%"} -->
<!-- ::: -->

<!-- :::{.column width="49%"} -->

Your computer has the source code and data of the `ggplot2` package after you install it. However, without adding `ggplot2::`, R does not recognize the functions and data in the `ggplot2` package unless we **load** the package into your R working environment.

We can load a R package into our R session using the command `library()`. With `library(ggplot2)`, R knows the function `ggplot` and data `mpg` are from the `ggplot2` package, and we don't need to add `ggplot2::` in front of them anymore.

```{r}
#| echo: true
#| eval: false

library(ggplot2)
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                colour = class)) + 
    geom_point()
```
<!-- ::: -->
<!-- :::: -->



### Operators

<span style="color:blue"> **R is a Calculator** </span>

First, as many other languages, R is a calculator. We can do basic arithmetic operations using R.

<span style="color:red"> ***Arithmetic Operators*** </span>

Basic arithmetic operators are shown in the table below. Most symbols are intuitive. To get the remainder of division, we use two percentage symbols. To get the quotient of division, we use percent, slash and percent symbol.

```{r}
#| label: fig-arithmetic-operators
#| fig-cap: "Table of arithmetic operators. Source: https://www.statmethods.net/management/operators.html"
knitr::include_graphics("./images/img-intro/arithmetic_operator.png")
```

<span style="color:red"> ***Examples*** </span>

Here are some examples. Very simple. But keep the PEMDAS rule in mind, the order of operations. We do operations on parenthesis first, then exponentiation, then multiplication/division and then addition/subtraction.

```{r}
#| echo: true
#| label: arithmetic-example
2 + 3 * 5 + 4
2 + 3 * (5 + 4)
```

<!-- - We have to do the operation in the parentheses first, as the PEMDAS rule describes in @fig-pemdas below. -->

```{r}
#| label: fig-pemdas
#| fig-cap: "Order of operations. Source: https://www.fabworldtoday.com/pemdas-rule/"
knitr::include_graphics("./images/img-intro/pemdas.jpeg")
```

-----------------------------------------------------------------------

<span style="color:blue"> **R Does Comparisons** </span> 

<span style="color:red"> ***Logical Operators*** </span>

Here are some commonly used comparison and logical operators. R uses `!` to negate the result, vertical bar `|` for "or" and `&` for "and". There is a R buil-in function `isTRUE()` to test if an object `x` is TRUE.

```{r}
#| label: fig-logical-operators
#| fig-cap: "Table of logical operators. Source: https://www.statmethods.net/management/operators.html"
knitr::include_graphics("./images/img-intro/logical_operator.png")
```

<span style="color:red"> ***Examples*** </span>

::::{.columns}

:::{.column width="39%"}

```{r}
#| echo: true
#| label: logical-example
5 <= 5
5 <= 4
# Is 5 is NOT equal to 5?
5 != 5
```

:::

:::{.column width="2%"}

:::

:::{.column width="59%"}

```{r}
#| echo: true
## Is TRUE not equal to FALSE?
TRUE != FALSE
## Is not TRUE equal to FALSE?
!TRUE == FALSE
## TRUE if either one is TRUE or both are TRUE
TRUE | FALSE
```

:::

::::

:::{.callout-note icon=false}

## What does `TRUE & FALSE` return?

:::

-----------------------------------------------------------------------

<span style="color:blue"> **Built-in Functions** </span>

R has lots of built-in functions, especially for mathematics, probability and statistics. No importing other modules or libraries is required. These functions are pretty similar to the MATLAB or Python functions. We'll learn more about them together when we are actually doing probability and statistics.

```{r}
#| label: fig-built-functions
#| fig-cap: "R Built-in functions. Source: https://www.statmethods.net/management/functions.html"
#| out-width: 60%
knitr::include_graphics("./images/img-intro/numeric_fcns.png")
```


<span style="color:red"> ***Examples*** </span>

::::{.columns}

:::{.column width="49%"}

```{r}
#| echo: true
#| label: builtin-fcns
sqrt(144)
exp(1)  ## Euler's number
sin(pi/2)
abs(-7)
```

:::

:::{.column width="2%"}

:::

:::{.column width="49%"}

```{r}
#| echo: true
factorial(5)
## without specifying base value
## it is a natural log with base e
log(100)
## log function and we specify base = 2
log(100, base = 10)
```

:::

::::

-----------------------------------------------------------------------

<span style="color:blue"> **Commenting** </span>

:::{.callout-note icon=false}

## You've seen comments a lot! How do we write a comment in R?

:::

We use `#` to add a comment so that the text after `#` is not read as an R command. Writing (good) comments is highly recommended. Comments help readers, and more importantly yourself, understand what the code is doing. They should explain the *why*, not the what.

::::{.columns}

:::{.column width="50%"}

```{r}
#| out-width: 100%
#| fig-cap: "https://www.reddit.com/r/ProgrammerHumor /comments/8w54mx/code_comments_be_like/"
knitr::include_graphics("./images/img-intro/cat_comment.png")
```

:::

:::{.column width="50%"}

```{r}
#| fig-cap: "https://juliabirkett.medium.com/in-defense-of-some-code-comments-8e60f2ae0a4"
knitr::include_graphics("./images/img-intro/stopsign.webp")
```

:::

::::

-----------------------------------------------------------------------

<span style="color:blue"> **Objects and Funtions in R** </span>

To understand computation in R, two slogans are helpful:

> <span style="color:red"> Everything that **exists** is an **object**. </span>  
<span style="color:red"> Everything that **happens** is a **function call**. </span>  
  -- *[John Chambers](https://bit.ly/3yJJGrC), the creator of the S programming language*.

We have made lots of things happen! Even arithmetic and logical operators are functions!

```{r}
#| echo: true
`+`(x = 2, y = 3)
`&`(TRUE, FALSE)
```

-----------------------------------------------------------------------

<span style="color:blue"> **Creating Variables** </span>

A variable stores a value that can be changed according to our need. In R it is highly recommended `r emoji('+1')` using the `<-` operator to *assign* a value to the variable. [^1]

[^1]: https://colinfay.me/r-assignment/ for more discussion about why we use arrow as an assignment operator in R.

For example, we create an object, value 5, and call it `x`, which is a variable. We type the variable name to see the value of the object stored in the variable.

```{r}
#| echo: true
#| label: assignment
x <- 5
x
```

<!-- - Can also use `=` symbol to do assignment. (`r emoji('x')` Does not work in some situations) -->

We can reassign any value to the variable we created. We can also perform any operations on variables. Variables can also be used in any built-in functions too.

```{r}
#| echo: true
#| label: variable
(x <- x + 6)
x == 5
log(x) 
```


```{r}
#| fig-cap: "Source: https://irudnyts.github.io/r-coding-style-guide/"
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("./images/img-intro/r_assign_syntax.jpg")
```

-----------------------------------------------------------------------

<span style="color:blue"> **Bad Naming** </span>

- `r emoji('x')` Unless you have a very good reason, don't create a variable whose name is the same as any R [*built-in constant*](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Constants.html) or function!
- `r emoji('worried')` It causes lots of confusion when your code is long and when others read it.

`pi` is a R built-in constant, the ratio of the circumference of a circle to its diameter. `abs(x)` is a built-in function for calculating the absolute value of `x`. Please NO NOT do assignment like the following unless you have a very strong reason to do so. The bad assignment or naming forces `pi` and `abs` both to be equal to 20 that causes lots of confusion.

```{r}
#| echo: true
#| label: bad-naming

## THIS IS BAD CODING! DON'T DO THIS!
pi
(pi <- 20)
abs
(abs <- abs(pi))
```

### Object Types

<span style="color:blue"> **Types of Variables** </span>

We know we can create R objects, right? And objects may have different types. Object Type plays an important role in data analysis, because it affects which model we should use and which functions we should use to manipulate our data.

We use R command **`typeof()`** to check which type a variable belongs to. Common types include **`character`**, **`double`**, **`integer`** and **`logical`**. To check if it's of a specific type, we can use **`is.character()`**, **`is.double()`**, **`is.integer()`**, **`is.logical()`**.

::::{.columns}

:::{.column width="49%"}

```{r}
#| echo: true
#| label: type
typeof(5)
typeof(5L)
typeof("I_love_stats!")
```

:::

:::{.column width="2%"}

:::

:::{.column width="49%"}

```{r}
#| echo: true
typeof(1 > 3)
is.double(5L)
```

:::

::::

<!-- The potential confusion is that R has used mode "numeric" to mean ‘double or integer’, which conflicts with the S4 usage. Thus is.numeric tests the mode, not the class, but as.numeric (which is identical to as.double) coerces to the class. -->

<!-- typeof(as.numeric(5L)) returns "double" -->

<span style="color:red"> ***Variable Types in R and in Statistics*** </span>

Type `character` and `logical` correspond to **categorical** variables. Type `logical` is a special type of categorical variables that has only two categories (**binary**). We usually call it a **binary** variable.


Type `double` and `integer` correspond to **numerical** variables with an exception discussed later. Type `double` is for **continuous** variables, and type `integer` is for **discrete** variables.

### R Data Structures

<span style="color:blue"> **(Atomic) Vector** </span>

To create a vector, we use command `c()`, which is short for *concatenate* or *combine*. The key property is that *all elements of a vector must be of the same type*. 


In the example, we learn that `TRUE` and `FALSE` can be written as `T` and `F`. To check how many elements in a vector, we use `length()`. So `length(dbl_vec)` returns 3.  The command `str()` is useful when we want to quickly get a compact description of any R object of any data structure. `dbl_vec` is a numerical vector that has three elements whose values are 1, 2.5, and 4.5.

::::{.columns}

:::{.column width="52%"}

```{r}
#| echo: true
#| label: vector
(dbl_vec <- c(1, 2.5, 4.5)) 
(int_vec <- c(1L, 6L, 10L))
(log_vec <- c(TRUE, FALSE, F))  
(chr_vec <- c("pretty", "girl"))
```

:::

:::{.column width="2%"}

:::

:::{.column width="46%"}

```{r}
#| echo: true

length(dbl_vec) 
str(dbl_vec) 
```

:::

::::

<span style="color:red"> ***Operations on Vectors*** </span>

We can do the same operations on vectors that we do on a *scalar* variable which can be viewed as a vector of length 1. All operations happen element-wisely. We can also use a function on a vector if the fucntion accepts vectors, for example, `log()` and `sqrt()`.

::::{.columns}

:::{.column width="49%"}

```{r}
#| echo: true
#| label: vector-arithmetic
# Create two vectors
v1 <- c(3, 8)
v2 <- c(4, 100) 

# Vector addition
v1 + v2
# Vector subtraction
v1 - v2
```

:::

:::{.column width="2%"}

:::

:::{.column width="49%"}

```{r}
#| echo: true
# Vector multiplication
v1 * v2
# Vector division
v1 / v2
sqrt(v2)
```

:::

::::

<span style="color:red"> ***Recycling of Vectors*** </span>

If we apply arithmetic operations to two vectors of *unequal* length, the elements of the shorter vector will be *recycled* to complete the operations.

In the example, `v1 * 2` means that each element in `v1` is multiplied by 2. So it is equivalent to multiply by a vector of 2 of the same length of `v1`. `v3` becomes `c(4, 11, 4, 11)` when doing the operation `v1 + v3`.

<!-- - Beware of recycling! -->
<!-- - The concept of *recycling* helps us write more concise code. -->

```{r}
#| echo: true
#| label: recycle
v1 <- c(3, 8, 4, 5)
v1 * 2
v1 * c(2, 2, 2, 2)
v3 <- c(4, 11)
v1 + v3
```

<span style="color:red"> ***Subsetting Vectors*** </span>

To extract element(s) in a vector, use a pair of brackets `[]` with element indexing. The indexing *starts with 1*. We can put a sequence of numbers inside the brackets to extract multiple elements. For example, We can use the vector c(1, 3) to extract the first and the third element. If we want to extract all but a few elements, just put a negative sign before the vector of indices. For example `v1[-c(2, 3)]` keeps all the elements except the second and the third one.


::::{.columns}

:::{.column width="44%"}

```{r}
#| echo: true
#| label: subsetting
v1
v2
## The first element
v1[1] 
## The second element
v2[2]  
```
:::

:::{.column width="2%"}

:::

:::{.column width="54%"}

```{r}
#| echo: true
v1[c(1, 3)]
v1[-c(2, 3)] 
```

:::

::::

---------------------------------------------------------------------

<span style="color:blue"> **Factor** </span>

A vector of type `factor` can be *ordered in a meaningful way*, but difference is meaningless. So it is ordinal level of measurement and it is for categorical data.

We create a factor by `factor()`. Be careful! It is a type of *integer*, not *character*! `r emoji('astonished')`  `r emoji('roll_eyes')` 

Because a factor is an ordered vector, there is a level associated with it. Each level represents an integer, and by default they are ordered from the vector alphabetically. Here, the level of `fac` from the lowest to highest is "high" "low"  "med". R stores a level using integers. So "high" is 1, "low" is 2, and "med" is 3. 

If we check its structure using `str()`, it tells us it is a factor with 3 levels, and the first element is "med" which is the third level of the factor, so its number is 3. The second element is "high", corresponding to the level level, so its number is 1. The "low" has the number 2 because it is the second level.

Clearly, ordering a factor alphabetically is not what we want here because the levels and integers do not match the meaning of category in the factor. We can specify the level we want using the argument `levels` in the `factor()` function. For example here, we tell R that the level of this factor, from the lowest to highest is "low", "med", "high. And now the factor is correctly ordered showing 2, 3, 1 here.

```{r}
#| echo: true
#| label: factor
fac <- factor(c("med", "high", "low"))
typeof(fac)
levels(fac)
str(fac)
order_fac <- factor(c("med", "high", "low"), levels = c("low", "med", "high"))
str(order_fac)
```

---------------------------------------------------------------------

<span style="color:blue"> **List (Generic Vectors)** </span>

Lists are different from vectors. Elements can be of *any type*, including lists themselves.

We construct a list by using **`list()`** instead of `c()`. For example, we create a list of 3 elements of different types, integer, charactor, and logical respectively. Elements are separated by a comma.

The first and third elements are vectors, and the second element is a one single charactor. The first element has the name `idx`, and the second and third elements have no name.

::::{.columns}

:::{.column width="52%"}

```{r}
#| echo: true
#| label: list
x_lst <- list(idx = 1:3, 
              "a", 
              c(TRUE, FALSE))
x_lst
```
:::

:::{.column width="2%"}

:::

:::{.column width="46%"}

```{r}
#| echo: true
str(x_lst)
names(x_lst)
length(x_lst)
```

:::

::::

<span style="color:red"> ***Subsetting a List*** </span>

This is where we should pay more attention to. When we subset a list, it may return an element of the list, or it returns a sub-list of the list. Let's see how it happens.


```{r}
#| echo: true
x_lst <- list(idx = 1:3,
             "a",
             c(TRUE, FALSE))
```


We can subset a list by name or by indexing. Suppose we want the first element of the list, we can get it by its name using `x_lst$idx`. We can also obtain it by using indexing like `x_lst[[1]]` because we want the first element. Notice that the way we subset a list returns an integer vector, the real first element of the list, not a list.

Let's see another case on the right. We can also subset by name using single pair of brackets, and put the name inside the brackets with quotation marks. Or we can subset by indexing, using a single pair of brackets instead. And you see what happened? The way we subset a list here returns a sub-list, not the element itself.

Please be careful when subsetting a list. If you want a vector, use `$name` or `[[number]]`. If you want to keep it as a list, use `["name"]` or `[number]`.


::::{.columns}

:::{.column width="49%"}

<center>
**Return an <span style="color:red"> element </span> of a list**
</center>

```{r}
#| echo: true
## subset by name (a vector)
x_lst$idx  
## subset by indexing (a vector)
x_lst[[1]]  
typeof(x_lst$idx)
```

:::

:::{.column width="2%"}

:::

:::{.column width="49%"}

<center>
**Return a <span style="color:red"> sub-list </span> of a list**
</center>

```{r}
#| echo: true
## subset by name (still a list)
x_lst["idx"]  
## subset by indexing (still a list)
x_lst[1]  
typeof(x_lst["idx"])
```

:::

::::

We know images speak louder than words. Here you go.

```{r}
#| label: fig-subsetting-list
#| fig-cap: Condiment analogy for subsetting lists
knitr::include_graphics("./images/img-intro/list_condiment.png")
```

<br>

> If list `x` is a train carrying objects, then `x[[5]]` is
> the object in car 5; `x[4:6]` is a train of cars 4-6.
>
> --- \@RLangTip, <https://twitter.com/RLangTip/status/268375867468681216>

```{r}
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("https://raw.githubusercontent.com/hadley/adv-r/master/diagrams/subsetting/train.png")
```

```{r}
#| label: fig-subsetting-train
#| fig-cap: Train analogy for subsetting a list
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("https://raw.githubusercontent.com/hadley/adv-r/master/diagrams/subsetting/train-single.png")
```

-------------------------------------------------------------------

<span style="color:blue"> **Matrix** </span>

A matrix is a *two-dimensional analog of a vector*. We use command `matrix()` to create a matrix. By default, R creates a matrix column by column. In other words, R is a column major language.

```{r}
#| echo: true
#| label: matrix
## Create a 3 by 2 matrix called mat
(mat <- matrix(data = 1:6, nrow = 3, ncol = 2)) 
dim(mat)  # dimension
nrow(mat) # number of rows
ncol(mat) # number of columns
```

<span style="color:red"> ***Subsetting a Matrix*** </span>

To extract a sub-matrix, use the same indexing approach as vectors on rows and columns. Because a matrix has row index and column index, we use comma `,` to separate row and column index of a matrix. For example, `mat[2, 2]` extracts the element of the second row and second column.

When we leave row index blank, and specify 2 in column index, `mat[, 2]` returns all rows and 2nd column, and `mat[, 2]` automatically becomes a vector.

::::{.columns}

:::{.column width="49%"}

```{r}
#| echo: true
#| label: matrix-indexing
mat
mat[, 2]
```

:::

:::{.column width="2%"}

:::

:::{.column width="49%"}

```{r}
#| echo: true
## 2nd row and all columns
mat[2, ] 
## The 1st and 3rd rows
mat[c(1, 3), ] 
```

:::

::::

<span style="color:red"> ***Binding Matrices*** </span>

We can generalize `c()` used in vectors to `cbind()` (binding matrices by adding columns) and `rbind()` (binding matrices by adding rows) for matrices. When matrices are combined by columns, they should have the same number of rows. When matrices are combined by rows, they should have the same number of columns.

<!-- ::::{.columns} -->
<!-- :::{.column width="49.25%"} -->
```{r}
#| echo: true
#| label: matrix-bind
mat
mat_c <- matrix(data = c(7, 0, 0, 8, 2, 6), nrow = 3, ncol = 2)
## should have the same number of rows
cbind(mat, mat_c)  
```
<!-- ::: -->

<!-- :::{.column width="1.5%"} -->
<!-- ::: -->

<!-- :::{.column width="49.25%"} -->
```{r}
#| echo: true
mat_r <- matrix(data = 1:4, nrow = 2, ncol = 2)
## should have the same number of columns
rbind(mat, mat_r)  
```
<!-- ::: -->
<!-- :::: -->

-------------------------------------------------------------------

<span style="color:blue"> **Data Frame: The Most Common Way of Storing Data** </span>

In fact, the data matrix we discussed before can be and should be stored as a data frame in R.

A data frame is of type **list** of *equal-length* vectors, having a *2-dimensional* structure. It is more general than a matrix in that *different columns can have different types.* Each column vector is an element of the list.

To create a data frame, we use `data.frame()` that takes *named* vectors as inputs. 

<!-- ::::{.columns} -->
<!-- :::{.column width="49%"} -->
```{r}
#| echo: true
#| label: dataframe
## data frame w/ an dbl column named age and char column named gender
(df <- data.frame(age = c(19, 21, 40), gender = c("m", "f", "m")))

## a data frame has a list structure
str(df)  
```
<!-- ::: -->

<!-- :::{.column width="2%"} -->
<!-- ::: -->

<!-- :::{.column width="49%"} -->

Data frames must set column names, or they are ugly and non-recognizable.

```{r}
#| echo: true
data.frame(c(19, 21, 40), c("m","f", "m")) 
```
<!-- ::: -->
<!-- :::: -->

<span style="color:red"> ***Properties of Data Frames*** </span>

Data frame has properties of matrix and list.

<!-- ::::{.columns} -->
<!-- :::{.column width="44%"} -->
```{r}
#| echo: true
#| label: df-fcns
names(df)  ## as a list

colnames(df)  ## as a matrix

length(df) ## as a list

ncol(df) ## as a matrix

dim(df) ## as a matrix

typeof(df)

class(df)
```
<!-- ::: -->

<!-- :::{.column width="2%"} -->
<!-- ::: -->

<!-- :::{.column width="54%"} -->

```{r}
#| echo: true
## rbind() and cbind() can be used on df

df_r <- data.frame(age = 10, gender = "f")
rbind(df, df_r)

df_c <- data.frame(col = c("red","blue","gray"))
(df_new <- cbind(df, df_c))
```
<!-- ::: -->
<!-- :::: -->


<span style="color:red"> ***Subsetting a Data Frame*** </span>

When we subset data frames, we can use either list or matrix subsetting methods.

<!-- ::::{.columns} -->
<!-- :::{.column width="49%"} -->
```{r df-subset}
#| echo: true
df_new

## Subset rows
df_new[c(1, 3), ]

## select the row where age == 21
df_new[df_new$age == 21, ]
```
<!-- ::: -->

<!-- :::{.column width="2%"} -->
<!-- ::: -->

<!-- :::{.column width="49%"} -->
```{r}
#| echo: true
## Subset columns
## like a list
df_new$age
df_new[c("age", "gender")]

## like a matrix
df_new[, c("age", "gender")]

str(df["age"])  ## a data frame with one column

str(df[, "age"])  ## becomes a vector by default
```
<!-- ::: -->
<!-- :::: -->

-------------------------------------------------------------------

:::{.callout-warning icon=false}

## You can do it!
- Create a vector object called `x` that has 5 elements 3, 6, 2, 9, 14.
- Compute the average of elements of `x`.
- Subset the `mtcars` data set by selecting variables `mpg` and `disp`.
- Select the cars (rows) in `mtcars` that have 4 cylinders.

:::


## Exercises

```{r}
#| echo: true
# ==============================================================================
## Vector
# ==============================================================================
poker_vec <- c(170, -20, 50, -140, 210)
roulette_vec <- c(-30, -40, 70, -340, 20)
days_vec <- c("Mon", "Tue", "Wed", "Thu", "Fri")
names(poker_vec) <- days_vec
names(roulette_vec) <- days_vec
```

1. **Vector**

  The code above shows a Marquette student poker and roulette winnings from Monday to Friday. Copy and paste them into your R and complete problem 1.

(a) Assign to the variable `total_daily` how much you won or lost on each day in total (poker and roulette combined).
(b) Calculate the winnings overall `total_week`. Print it out.

<br>

```{r}
#| echo: true
# ==============================================================================
## Factor
# ==============================================================================
# Create speed_vector
speed_vec <- c("medium", "low", "low", "medium", "high")
```

2. **Factor**
(a) `speed_vec` above should be converted to an **ordinal** factor since its categories have a natural ordering. Create an ordered factor vector `speed_fac` by completing the code below. Set `ordered` to `TRUE`, and set `levels` to `c("low", "medium", "high")`. Print `speed_fac`.

```{r, eval=FALSE}
_________ <- factor(________, ordered = ______, 
                    levels = ______________________)
```
    
<br>    
    
```{r}
#| echo: true
# ==============================================================================
## Data frame
# ==============================================================================
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", 
          "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", 
          "Terrestrial planet", "Gas giant", "Gas giant", 
          "Gas giant", "Gas giant")
diameter <- c(0.375, 0.947, 1, 0.537, 11.219, 9.349, 4.018, 3.843)
rotation <- c(57.63, -242.03, 1, 1.05, 0.42, 0.44, -0.73, 0.65)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
```  

3. **Data Frame**  

Data frames have properties of lists and matrices, so we skip lists and matrices and focus on data frames.  You want to construct a data frame that describes the main characteristics of eight planets in our solar system. You feel confident enough to create the necessary vectors: `name`, `type`, `diameter`, `rotation` and `rings` that have already been coded up as above. The first element in each of these vectors corresponds to the first observation.  

(a) Use the function `data.frame()` to construct a data frame. Pass the vectors `name`, `type`, `diameter`, `rotation` and `rings` as arguments to `data.frame()`, in this order. Call the resulting data frame `planets_df`.
    
```{r, eval=FALSE}
________ <- data.frame(______, ______, ______, ______, ______)
```
    
(b) Use `str()` to investigate the structure of the new `planets_df` variable. Which are categorical (qualitative) variables and which are numerical (quantitative) variables? For those that are categorical, are they nominal or ordinal? For those numerical variables, are they interval or ratio level? discrete or continuous?
(c) From `planets_df`, select the diameter of Mercury: this is the value at the first row and the third column. Simply print out the result.
(d) From `planets_df`, select all data on Mars (the fourth row). Simply print out the result.
(e) Select and print out the first 5 values in the `diameter` column of `planets_df`.
(f) Use `$` to select the `rings` variable from `planets_df`.
(g) Use (f) to select all columns for planets that have rings.

