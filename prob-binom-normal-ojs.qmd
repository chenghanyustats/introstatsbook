---
# title: "Observable JS Approximating the Binomial distribution by Normal"
execute:
  echo: false
---


```{ojs}
//| echo: false
viewof params_binom_normal = Inputs.form([
      Inputs.range([1, 200], {value: 10, step: 1, label: tex`n`}),
      Inputs.range([0.001, 1], {value: 0.5, step: 0.001, label: tex`\pi`}),
    ])
```


```{ojs}
viewof kvantil_binom_normal = Inputs.range([0, params_binom_normal[0]], {value: 3, step: 1, label: "quantile"})
```


```{ojs}
moments_binom_normal = tex`
\text{If } X \sim \operatorname{Binom}(${params_binom_normal[0]},${params_binom_normal[1]}) \text{ then }\\[0.5em]


E( X) =n  \pi = ${(params_binom_normal[0]*params_binom_normal[1]).toPrecision(3)} \\[0.5em]
Var( X) =n  \pi (1-\pi) =${(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1])).toPrecision(3)} \\[0.5em]

`
```


```{ojs}
cdfs_normalapprox = 
{
  var cdf;
  if (normalapprox){
      cdf = tex`
        \begin{array}{ll}
        \text{Exact:} & P( X\leq ${kvantil_binom_normal}) =${binomcdf.toPrecision(4)} \\[0.25em]
        \text{Normal approx:} & P( X\leq ${kvantil_binom_normal}) =${normalapproxcdf.toPrecision(4)} \\[0.25em]
        \text{Normal approx with correction:} & P( X\leq ${kvantil_binom_normal}) =${normalapproxcdf_corrected.toPrecision(4)}
        \end{array}
        `
  }
  else{
      cdf = tex`
        \begin{array}{ll}
        \text{Exact:} & P( X\leq ${kvantil_binom_normal}) =${binomcdf.toPrecision(4)}
        \end{array}
        `
  }
  return cdf;
}
```


```{ojs}
viewof plotselector = Inputs.checkbox(["normal", "normal with correction"], {label: "plot approximation:", value: ["normal approximation", "normal approximation corrected"]})
```

```{ojs}
//| fig-cap: "Source: <https://observablehq.com/@mattiasvillani/approximating-the-binomial-distribution>"

plt_pdf_binom_normal = Plot.plot({
    color: {
          legend: true,
          domain: legenddomain.filter( (d,i) => boolselect[i]),
          range: legendcolor.filter( (d,i) => boolselect[i])
        },
    x: {
      label: "x",
      axis: true,
      domain: xrange
    },
    y: {
      label: "P(X = x)",
      domain: [0,1.1*jstat.binomial.pdf(params_binom_normal[0]*params_binom_normal[1], params_binom_normal[0],params_binom_normal[1])]
    },
  tooltip: {
    fill: "b39640",
    stroke: "b39640",
    opacity: 1,
  },
    marks: [
      Plot.ruleY([0]),
      Plot.barY(approxpdf,{x: "x", y: "binompdf", fill : "#C1CFE4", strokeWidth: 0, opacity: 0.8, 
        title: (d) => `P(X=${d.x}) = ${(d.binompdf).toPrecision(4)}`}),
      Plot.barY(approxpdf, {filter: d => d.x <= kvantil_binom_normal, x: "x", y: "binompdf", fill: "#98afd2", opacity: 1,
        title: (d) => `P(X=${d.x}) = ${(d.binompdf).toPrecision(4)}`}),
      
      Plot.line(approxpdf, {filter: d => normalapprox, x: "x", y: "normalpdf", stroke : "#AB8D61", strokeWidth: 2}),
      Plot.dot(approxpdf, {filter: d => normalapprox, x: "x", y: "normalpdf", stroke : "#AB8D61", strokeWidth: 2}),
      
      Plot.line(approxpdf, {filter: d => normalapproxcorr, x: "x", y: "normalpdfcorr", stroke : "#007878", strokeWidth: 2}),
      Plot.dot(approxpdf, {filter: d => normalapproxcorr, x: "x", y: "normalpdfcorr", stroke : "#007878", strokeWidth: 2}),
      
      // Plot.ruleX(approxpdf, {filter: d => poisapprox && d.x >= 0, x: "x", y: "poissonpdf", stroke: "#780000", strokeWidth: 2}),  
      // Plot.dot(approxpdf, {filter: d => poisapprox && d.x >= 0, x: "x", y: "poissonpdf", fill: "#780000", r: 5}),
    ]
  })
```


```{ojs}
approxpdf = {
  const x = xrange;
  const approxpdf = x.map(x => ({
    x: x, 
    binompdf: jstat.binomial.pdf(x, params_binom_normal[0], params_binom_normal[1]),
    normalpdf: jstat.normal.pdf(x, params_binom_normal[0]*params_binom_normal[1], Math.sqrt(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1]))), 
    normalpdfcorr: jstat.normal.cdf(x + 0.5, params_binom_normal[0]*params_binom_normal[1], Math.sqrt(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1])))-jstat.normal.cdf(x - 0.5, params_binom_normal[0]*params_binom_normal[1], Math.sqrt(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1]))),
    // poissonpdf: jstat.poisson.pdf(x, params_binom_normal[0]*params_binom_normal[1])
  }));
  return approxpdf
}
```

```{ojs}
xrange = d3.range(0, high + 1, 1);
```

```{ojs}
high = Math.ceil(jstat.normal.inv(0.9999, params_binom_normal[0]*params_binom_normal[1], Math.sqrt(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1]))))
```

<!-- ```{ojs} -->
<!-- //low = Math.floor(jstat.normal.inv(0.0001, params_binom_normal[0]*params_binom_normal[1], Math.sqrt(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1])))) -->
<!-- ``` -->

```{ojs}
legendcolor = ["#C1CFE4", "#AB8D61", "#007878", "#780000"]
```

```{ojs}
boolselect = [true, normalapprox, normalapproxcorr]
```

```{ojs}
normalapproxcorr = plotselector.includes("normal with correction")
```

```{ojs}
normalapprox = plotselector.includes("normal")
```


```{ojs}
legenddomain = ["binomial", "normal", "normal with correction"]
```

```{ojs}
normalapproxcdf = jstat.normal.cdf(kvantil_binom_normal, params_binom_normal[0]*params_binom_normal[1], Math.sqrt(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1])))
```

```{ojs}
binomcdf_binom_normal = jstat.binomial.cdf(kvantil_binom_normal, params_binom_normal[0], params_binom_normal[1]);
```

```{ojs}
normalapproxcdf_corrected = jstat.normal.cdf(kvantil_binom_normal+0.5, params_binom_normal[0]*params_binom_normal[1], Math.sqrt(params_binom_normal[0]*params_binom_normal[1]*(1-params_binom_normal[1])))
```

```{ojs}
binomcdf = jstat.binomial.cdf(kvantil_binom_normal, params_binom_normal[0], params_binom_normal[1]);
```

