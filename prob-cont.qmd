# Continuous Probability Distributions {#sec-prob-cont}

```{r packages, echo=FALSE, message=FALSE, warning=FALSE}
library(emoji)
library(knitr)
library(kableExtra)
library(openintro)
```

## Continuous Probability Distributions
- A continuous r.v. can take on **any** values from *an interval of the real line*.
- Instead of probability functions, a continuous r.v. $X$ has the **probability density function (pdf)** $f(x)$ such that for any real value $a < b$,
$$P(a < X < b) = \int_{a}^b f(x) dx$$
- The **cumulative distribution function (cdf)** of $X$ is defined as
$$F(x) := P(X \le x) = \int_{-\infty}^x f(t)dt$$
- Every pdf must satisfy <span style="color:blue"> (1) $f(x) \ge 0$ for all $x$; (2) $\int_{-\infty}^{\infty} f(x) dx = 1$ </span>



`r emoji('sunglasses')` Luckily we don't deal with integrals in this course.


## Density Curve
- A pdf generates a graph called the **density curve** that shows the *likelihood* of a random variable at all possible values.
- $P(a < X < b) = \int_{a}^b f(x) dx$: **The area under the density curve between $a$ and $b$.**
- $\int_{-\infty}^{\infty} f(x) dx = 1$: **The total area under any density curve is equal to 1.**

```{r, echo=FALSE, out.width="50%", fig.align='center'}
# knitr::include_graphics("./images/img-prob/density.png")
par(mar = c(2, 2, 0, 0), mgp = c(0.5, 0.2, 0), mfrow = c(1, 1))
x = seq(0,10,length=1000)
y = dgamma(x, 2, 1/2)
plot(x, y, type = "l", lwd = 3, col = "blue", axes = FALSE, 
     ylab = "f(x)", las = 1, cex.lab = 1.4)
axis(1, at = c(2, 4), labels = c("a", "b"), tick = TRUE)
axis(2, tick = FALSE, labels = FALSE)
abline(h = 0)
abline(v = 0)
x = seq(2, 4, length = 100)
y = dgamma(x, 2, 1/2)
polygon(c(2, x, 4), c(0, y, 0), col = "lightblue")
text(3, dgamma(2, 2, 1/2)/2, "P(a < X < b)", cex = 1.4)
text(6, dgamma(6, 2, 1/2)/3, "Total Area = 1", cex = 1.8)
text(7.5, dgamma(5.6, 2, 1/2), "density curve", cex = 1.8)
```


## Commonly Used Continuous Distributions
- R Shiny app is at [Continuous Distribution](http://sctc.mscs.mu.edu:3838/sample-apps/Calculator/)
- In this course, we will touch **normal (Gaussian)**, **student's t**, **chi-square**, **F**
- Some other common distributions include **uniform**, **exponential**, **gamma**, **beta**, **inverse gamma**, **Cauchy**, etc. (MATH 4700)


## Normal (Gaussian) Distribution
-  The normal distribution, $N(\mu, \sigma^2$), has the pdf given by 
$$\small f(x) = \frac{1}{\sqrt{2\pi}\sigma}e^{\frac{-(x-\mu)^2}{2\sigma^2}}, \quad -\infty < x < \infty$$
    - Two parameters mean $\mu$ and variance $\sigma^2$ (standard deviation $\sigma$)
    - Always bell shaped, and symmetric about the mean $\mu$
    - When $\mu = 0$ and $\sigma = 1$, $N(0, 1)$ is called **standard normal**.

```{r normal_density, echo=FALSE, out.width='35%', fig.align='center'}

par(mfrow = c(1, 1))
par(mar = c(1.8, 0, 1.2, 0), mgp = c(0.5, 0.2, 0), las = 1)
mean=100; sd=15
# lb=80; ub=120
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n", xlab="x", ylab="",
  main=expression(N(100, 15^2)), axes=FALSE)
# i <- x >= lb & x <= ub
lines(x, hx, col = "#003366", lwd = 3)
# polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
# area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)
# result <- paste("P(",lb,"< IQ <",ub,") =",
#    signif(area, digits=3))
# mtext(result,3)
axis(1, at=seq(40, 160, 20), pos=0, tick = -0.005)
```


## Normal Density Curves
```{r normal_densities, echo=FALSE, out.width='75%', fig.align='center'}
mean=100; sd=10
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n", xlab="x", ylab="", xlim = c(-30, 160), bty = "n",
     main="normal densities", yaxt = "n", xaxt = "n")
axis(1, at=seq(-30, 160, 20), pos=0, tick = -0.005)
lines(x, hx, col = "#003366", lwd = 3)
mean=100; sd=15
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
lines(x, hx, col = "#FFCC00", lwd = 3)
mean=20; sd=10
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
lines(x, hx, col = 2, lwd = 3)
legend("topright", c(expression(N(100, 10^2)), 
                     expression(N(100, 15^2)), 
                     expression(N(20, 10^2))), 
       col = c("#003366", "#FFCC00", 2), lwd = 3, bty = "n")
```

## Standardization and Z-Scores 
- **Standardization**: Convert $N(\mu, \sigma^2)$ to $N(0, 1)$.
- **Why standardization**: Put data onto a *standardized scale*, making comparisons easier!

:::{.callout-note icon=false}

|Measure        | SAT               | ACT         |
|:-------------:|:-----------------:|:-----------:|
| Mean          | 1100              | 21          |  
| SD            | 200               | 6           |

  + The distribution of SAT and ACT scores are both nearly normal. 
  + Suppose Anna scored 1300 on her SAT and Tommy scored 24 on his ACT. Who performed better?
:::

```{r, echo=FALSE, out.width="50%", fig.align='center'}
knitr::include_graphics("./images/img-prob/sat_act.jpeg")
```


-  If $x$ is an observation from a distribution with mean $\mu$ and standard deviation $\sigma$, the standardized value of $x$ is so-called **$z$-score**:
$$z = \frac{x - \mu}{\sigma}$$

- A $z$-score tells us how many standard deviations $x$ falls away from the mean, and in which direction. 

  + Observations **larger (smaller)** than the mean have **positive (negative)** $z$-scores. 
  
  + A $z$-score -1.2 means that $x$ is 1.2 standard deviations to the **left** of (**below**) the mean. 
  
  + A $z$-score 1.8 means that $x$ is 1.8 standard deviations to the **right** of (**above**) the mean. 
  
- <span style="color:blue">  If $X \sim N(\mu, \sigma^2)$, $Z = \frac{X - \mu}{\sigma}$ follows the standard normal distribution, i.e., $Z \sim N(0, 1)$. </span>


## Standardization Illustration
- $X - \mu$ shifts the mean from $\mu$ to 0

```{r standardization_shift, echo=FALSE, out.width='65%', fig.asp=0.3, fig.align='center'}
mean = 3; sd = 2
par(mar = c(2, 0, 1, 0), mgp = c(1, 0.2, 0), las = 1)
x <- seq(-6, 9, length = 100)
# z <- seq(-3, 13, length = 100)
hx <- dnorm(x, mean, sd)
hz <- dnorm(x, 0, sd)
plot(x, hz, type="n", xlab="x", ylab="", ylim = c(0, dnorm(0, 0, 1)),
  main = "Shift from N(3, 4) to N(0, 4)", axes = FALSE)
lines(x, hz, col = "blue", lwd = 4)
lines(x, hx, col = "#003366", lwd = 4)
axis(1, at = seq(-3, 9, 1), pos=0)
# abline(v = c(0, 3))
segments(x0 = 0, y0 = 0, y1 = dnorm(0, 0, sd), col = "blue", lwd = 2)
segments(x0 = mean, y0 = 0, y1 = dnorm(mean, mean, sd), col = "#003366", lwd = 2)
arrows(x0 = 3, y0 = 0.1, x1 = 0, col = "darkgray", lwd = 2)
```


- $\frac{X - \mu}{\sigma}$ scales the variation from 4 to 1

```{r standardization_scale, echo=FALSE, out.width='65%', fig.asp=0.3, fig.align='center'}
par(mar = c(2, 0, 1, 0), mgp = c(1, 0.2, 0), las = 1)
x <- seq(-6, 9, length = 100)
# z <- seq(-3, 13, length = 100)
hx <- dnorm(x, 0, sd)
hz <- dnorm(x, 0, 1)
plot(x, hz, type="n", xlab="x", ylab="", ylim = c(0, dnorm(0, 0, 1)),
  main = "Scale from N(0, 4) to N(0, 1)", axes = FALSE)
lines(x, hz, col = "red", lwd = 4)
lines(x, hx, col = "blue", lwd = 4)
axis(1, at = seq(-3, 9, 1), pos=0)
segments(x0 = 0, y0 = 0, y1 = dnorm(0, 0, 1), col = "red", lwd = 2)
arrows(x0 = 3, y0 = 0.05, x1 = 2, col = "darkgray", lwd = 2)
arrows(x0 = 0.5, y0 = dnorm(0, 0, 2), x1 = 0.5, y1 = dnorm(0, 0, 1), col = "darkgray", lwd = 2)
```


- A value of $x$ that is 2 standard deviation below $\mu$ corresponds to $z = -2$.
- $z = \frac{x  -\mu}{\sigma} \iff x = \mu + z\sigma$. If $z = -2$, $x = \mu - 2\sigma$.

```{r z_score, echo=FALSE, out.width='70%', fig.align='center'}
par(mar = c(4, 0, 0, 0), mgp = c(0, 0.5, 0), las = 1)
z <- seq(-3, 3, length = 100)
hz <- dnorm(z)
plot(z, hz, type="n", xlab="", ylab="", ylim = c(0, dnorm(0, 0, 1)),
  main = "", axes = FALSE)
lines(z, hz, col = 4, lwd = 4)
segments(x0 = 0, y0 = 0, y1 = dnorm(0, 0, 1), col = 4, lwd = 1, lty = 2)
segments(x0 = 1, y0 = 0, y1 = dnorm(1, 0, 1), col = 4, lwd = 1, lty = 2)
segments(x0 = 2, y0 = 0, y1 = dnorm(2, 0, 1), col = 4, lwd = 1, lty = 2)
segments(x0 = 3, y0 = 0, y1 = 5*dnorm(3, 0, 1), col = 4, lwd = 1, lty = 2)
segments(x0 = -1, y0 = 0, y1 = dnorm(-1, 0, 1), col = 4, lwd = 1, lty = 2)
segments(x0 = -2, y0 = 0, y1 = dnorm(-2, 0, 1), col = 4, lwd = 1, lty = 2)
segments(x0 = -3, y0 = 0, y1 = 5*dnorm(-3, 0, 1), col = 4, lwd = 1, lty = 2)
axis(1, at = seq(-3, 3, 1), pos=0, line = 1)
axis(1, at = seq(-3, 3, 1), labels = TRUE , tick = 0.01, line = 2)
```



## SAT and ACT Example
- $z_{A} = \frac{x_{A} - \mu_{SAT}}{\sigma_{SAT}} = \frac{1300-1100}{200} = 1$; $z_{T} = \frac{x_{T} - \mu_{ACT}}{\sigma_{ACT}} = \frac{24-21}{6} = 0.5$.
```{r sat, echo=FALSE, out.width='70%', fig.align='center'}
par(mfrow = c(2, 1),
    las = 1,
    mar = c(2.5, 0, 0.5, 0))
# _____ Curve 1 _____ #
m <- 1100
s <- 200
X <- m + s * seq(-6, 6, 0.01)
Y <- dnorm(X, m, s)
plot(X, Y,
     type = 'l',
     axes = FALSE, xlab = "",
     xlim = m + s * 2.7 * c(-1, 1))
axis(1, at = m + s * (-3:3))
abline(h = 0)
lines(c(m, m),
      dnorm(m, m, s) * c(0.01, 0.99),
      lty = 2,
      col = '#EEEEEE')
lines(c(m, m) + s,
      dnorm(m + s, m, s) * c(0.01, 1.25),
      lty = 2, col = COL[1])
text(m + s,
     dnorm(m + s, m, s) * 1.25,
     'Anna',
     pos = 3,
     col = COL[1])


# _____ Curve 2 _____ #
par(mar = c(2, 0, 1, 0))
m <- 21
s <- 6
X <- m + s * seq(-6, 6, 0.01)
Y <- dnorm(X, m, s)
plot(X, Y, xlab = "",
     type = 'l',
     axes = FALSE,
     xlim = m + s * 2.7 * c(-1, 1))
axis(1, at = m + s * (-3:3))
abline(h = 0)
lines(c(m, m),
      dnorm(m, m, s) * c(0.01, 0.99),
      lty = 2,
      col = '#EEEEEE')
lines(c(m, m) + 3,
      dnorm(m + 3, m, s) * c(0.01, 1.2),
      lty = 2,
      col = COL[1])
text(m + 3,
     dnorm(m + 3, m, s) * 1.05,
     'Tommy',
     pos = 4,
     col = COL[1])
```

## Finding Tail Areas $P(X < x)$
:::{.callout-note icon=false}
## What fraction of students have an SAT score below Anna's score of 1300?
:::
- This is the same as the percentile Anna is at, which is the percentage of cases that have lower scores than Anna.
- Need $P(X < 1300 \mid \mu = 1100, \sigma = 200)$ or $P(Z < 1 \mid \mu = 0, \sigma = 1)$.

```{r tail, echo=FALSE, out.width='50%', fig.align='center'}
par(mfrow = c(1, 1), las = 1, mar = c(2.5, 0, 0, 0), mgp = c(0, 1, 0))
normTail(m = 1100, s = 200, L = 1300, col = 4, cex.axis = 1.3)
```

## Finding Tail Areas $P(X < x)$ in R

- With **`mean`** and **`sd`** representing the mean and standard deviation of a normal distribution

  + **`pnorm(q, mean, sd)`** to compute $P(X \le q)$
  
  + **`pnorm(q, mean, sd, lower.tail = FALSE)`** to compute $P(X > q)$



:::{layout-ncol=2}
```{r, ref.label="tail", echo=FALSE, out.width='100%'}
```

```{r}
pnorm(1, mean = 0, sd = 1)
pnorm(1300, mean = 1100, sd = 200)
```
:::

- The shaded area represents the proportion 84.1% of SAT test takers who had z-score below 1.

## SAT Example Cont'd
- SAT score follows $N(1100, 200^2)$. Shannon is a SAT taker, and nothing is known about Shannon's SAT aptitude. What is the probability Shannon SAT scores at least 1190?
- <span style="color:red"> Step 1: State the problem </span>

  +  <span style="color:blue"> We like to compute $P(X \ge 1190)$. </span>

- <span style="color:red"> Step 2: Draw a picture
```{r, echo=FALSE, out.width='40%', fig.align='center'}
par(mfrow = c(1, 1), las = 1, mar = c(4, 0, 0, 0), mgp = c(1, 1, 0))
normTail(m = 1100, s = 200, U = 1190, col = 4, cex.axis = 1.3)
```


```{r echo=FALSE, out.width='100%', fig.asp=0.2, fig.align='center'}
AddShadedPlot <- function(x, y, offset,
                          shade.start = -8,
                          shade.until = 8, col = 4) {
  lines(x + offset, y)
  lines(x + offset, rep(0, length(x)))
  these <- which(shade.start <= x & x <= shade.until)
  polygon(c(x[these[1]], x[these], x[rev(these)[1]]) + offset,
          c(0, y[these], 0),
          col = 4)
  lines(x + offset, y)
}
# AddText <- function(x, text) {
#   text(x, 0.549283, text, cex = 2)
# }

X <- seq(-3.2, 3.2, 0.01)
Y <- dnorm(X)
par(mfrow = c(1, 1), las = 1, mar = c(0, 0, 0, 0), mgp = c(0, 0, 0))
plot(X, Y, type = 'l', axes = FALSE, xlim = c(-3.4, 16 + 3.4), xlab = "", ylab = "")
AddShadedPlot(X, Y, 0, 0.45, 8)
AddShadedPlot(X, Y, 8)
AddShadedPlot(X, Y, 16, -8, 0.45)
segments(c(3.5, 3.5), c(0.19, 0.23), c(4.5, 4.5), lwd = 3)
# lines(c(3.72, 4.28), rep(0.549283, 2), lwd = 2)
lines(c(11.5, 12.5), c(0.21, 0.21), lwd = 3)
# text(12, 0.549283,' = ', cex = 2)

```

- <span style="color:red"> Step 3: Find $z$-score </span>: 

  + <span style="color:blue"> $z = \frac{1190 - 1100}{200} = 0.45$ and we like to compute $P(X > 1190) = P\left( \frac{X - \mu}{\sigma} > \frac{1190 - 1000}{200} \right) = P(Z > 0.45) = 1 - P(Z \le 0.45)$ </span>

- <span style="color:red"> Step 4: Find the area using `pnorm()` </span>
```{r}
1 - pnorm(0.45)
```


## Normal Percentiles in R

- To get the $100p$-th percentile (or the $p$ quantile $q$ ), given probability $p$, we use

  + **`qnorm(p, mean, sd)`** to get a value of $X$, $q$, such that $P(X \le q) = p$ 

  + **`qnorm(p, mean, sd, lower.tail = FALSE)`** to get $q$ such that $P(X \ge q) = p$



## SAT Example
- What is the 95th percentile for SAT scores?
- <span style="color:red"> Step 1: State the problem </span>
  
  +  <span style="color:blue"> We want to find $x$ s.t $P(X < x) = 0.95$. </span>
  
- <span style="color:red"> Step 2: Draw a picture
```{r, echo=FALSE, out.width='40%', fig.align='center'}
par(mfrow = c(1, 1), las = 1, mar = c(2, 0, 0, 0), mgp = c(1, 1, 0))
normTail(m = 1100, s = 200, L = qnorm(0.95, 1100, 200), col = 4, cex.axis = 1.3)
```

:::{.callout-note icon=false}
## **Find an $x$ value of the normal distribution, not an area (probability), which is 0.95.**
:::


## SAT Example Cont'd

- <span style="color:red"> Step 3: Find $z$-score s.t. $P(Z < z) = 0.95$ using `qnorm()`</span>: 

```{r}
(z_95 <- qnorm(0.95))
```

- <span style="color:red"> Step 4: Find the $x$ of the original scale </span>

  + <span style="color:blue"> $z_{0.95} = \frac{x-\mu}{\sigma}$. So $x = \mu + z_{0.95}\sigma$. </span>
  
```{r}
(x_95 <- 1100 + z_95 * 200)
```
- The 95th percentile for SAT scores is 1429.


```{r}
qnorm(p = 0.95, mean = 1100, sd = 200)
```


## Finding Probabilties

`r emoji('point_right')` **ALWAYS draw and label the normal curve and shade the area of interest.**

- `r emoji('point_right')` **Less than**

  + $\small P(X < x) = P(Z < z)$

  + `pnorm(z, mean = 0, sd = 1)`
  
  + `pnorm(x, mean = mu, sd = sigma)`

- `r emoji('point_right')` **Greater than**

  + $\small P(X > x) = P(Z > z) = 1 - P(Z \le z)$

  + `1 - pnorm(z)`

:::{.callout-note icon=false}
`r emoji('point_right')` Standardization is not a must.

`r emoji('point_right')` We have to specify the mean and SD of the original distribution of $X$, like `pnorm(x, mean = mu, sd = sigma)`.
:::

- `r emoji('point_right')` **Between two numbers**

  + $\small P(a < X < b) = P(z_a < Z < z_b) = P(Z < z_b) - P(Z < z_a)$
  
  + `pnorm(z_b) - pnorm(z_a)`

- `r emoji('point_right')` **Outside of two numbers** $(a < b)$
$$\small \begin{align} P(X < a \text{ or } X > b) &= P(Z < z_a \text{ or } Z > z_b) \\ &= P(Z < z_a) + P(Z > z_b) \\ &= P(Z < z_a) + 1 - P(Z < z_b) \end{align}$$

  + `pnorm(z_a) + 1 - pnorm(z_b)`
  
  + `pnorm(z_a) + pnorm(z_b, lower.tail = FALSE)`

:::{.callout-note icon=false}
`r emoji('point_right')` Any probability can be computed using the *"less than"* form (*lower* or *left* tail).

 `r emoji('point_right')` If the calculation involves the "greater than" form, add `lower.tail = FALSE` in `pnorm()`.
:::



## Checking Normality: Normal Quantile Plot
- Many statistical methods assume variables are normally distributed.
- Testing the appropriateness of the normal assumption is a key step.
- A **normal quantile plot (normal probability plot)** or a **Quantile-Quantile plot (QQ plot)** helps us check normality assumption.

  + $X$-axis: Quantiles of the *ordered* data if the data were normally distributed.
  
  + $Y$-axis: *Ordered* data values
  
- If the data are like normally distributed, the points on the QQ plot will lie close to a **straight line**.


## QQ plot in R
```{r qqplot, fig.height=4.5, out.width='60%', echo = -c(1,2,3, 4, 7), fig.align='center'}
par(mfcol = c(2, 2), las = 1, mar = c(3.5, 3.5, 2, 1), mgp = c(2, 0.5, 0))
normal_sample <- rnorm(1000)
right_skewed_sample <- rgamma(1000, 2, 1 / 2)
hist(normal_sample, col = 4, main = "Normal data", breaks = 20, border = "white")
qqnorm(normal_sample, main = "Normal data", col = 4)
qqline(normal_sample)
hist(right_skewed_sample, col = 6, main = "Right-skewed data", breaks = 20, border = "white")
qqnorm(right_skewed_sample, main = "Right-skewed data", col = 6)
qqline(right_skewed_sample)
```




