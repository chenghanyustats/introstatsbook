# Data Visualization {#sec-data-graphics}

```{r packages, echo=FALSE, message=FALSE, warning=FALSE, purl=FALSE}
library(tidyverse)
library(fontawesome)
library(fields)
library(microbenchmark)
library(openintro)
library(emoji)
library(kableExtra)
``` 


<span style="color:blue"> **Descriptive Statistics** </span>

- Before doing inferential statistics, let's first learn to understand our data by describing or summarizing it.
- This can be done using **frequency tables**, **graphics** or **numerical measures** so that appropriate methods can be performed for better inference results.


```{r data_type, echo=FALSE, out.width="70%", purl=FALSE, fig.align='center'}
#| label: fig-statistics-types
#| fig-cap: Branches of statistics
par(mar = c(0,0,0,0))
plot(c(-0.15, 1.15), c(0, 0.9), type = 'n', axes = FALSE)

text(0.6, 0.85, 'Statistics', font = 2, cex = 1.2)
rect(xleft = 0.4, ybottom = 0.8, xright = 0.8, ytop = 0.9)

text(0.25, 0.55, 'Descriptive Statistics', font = 2, cex = 1.2, col = "red")
rect(-0.05, 0.5, 0.55, 0.6)
arrows(x0 = 0.45, y0 = 0.78, x1 = 0.34, y1 = 0.62, length = 0.08)

text(0.9, 0.55, 'Inferential Statistics', font = 2, cex = 1.2, col = "red")
rect(0.6, 0.5, 1.2, 0.6)
arrows(0.76, 0.78, 0.85, 0.62, length = 0.08)


text(-0.1, 0.23, 'Frequency', font = 2, col = "blue")
text(-0.1, 0.17, 'Table', font = 2, col = "blue")
# rect(-0.15, 0.15, -0.05, 0.25)
arrows(0.1, 0.5, -0.05, 0.25, length = 0.08)
# 
text(0.2, 0.2, 'Graphics', font = 2, col = "blue")
# rect(0.11, 0.15, 0.29, 0.25)
arrows(0.2, 0.5, .2, 0.25, length = 0.08)

text(0.45, 0.23, 'Numerical', font = 2, col = "blue")
text(0.45, 0.17, 'Measures', font = 2, col = "blue")
# rect(0.31, 0.15, 0.49, 0.25)
arrows(0.35, 0.5, .45, 0.25, length = 0.08)

# 
text(0.7, 0.2, 'Estimation', font = 2, col = "blue")
# rect(0.6, 0.15, 0.8, 0.25)
arrows(0.75, 0.5, 0.7, 0.25, length = 0.08)

text(1, 0.23, 'Hypothesis', font = 2, col = "blue")
text(1, 0.17, 'Testing', font = 2, col = "blue")
# rect(0.88, 0.15, 1.12, 0.25)
arrows(0.9, 0.5, 1, 0.26, length = 0.08)



text(1.1, 0.75, 'Probability', font = 2, col = "green4")
# rect(0.9, 0.7, 1.3, 0.8)
arrows(1.05, 0.73, 0.9, 0.61, length = 0.08)
```

## Frequency Table for Categorical Variable

- A **frequency table (frequency distribution)** lists variable values individually for categorical data along with their corresponding number of times occurred in the data (**frequencies** or **counts**).
- Below is an example of a frequency table for categorical data with $n$ being the total number of data values.

| Category name | Frequency     | Relative Frequency |
|:-------------:|:-------------:|:------------------:|
| $C_1$         | $f_1$         | $f_1/n$ |
| $C_2$         | $f_2$         | $f_2/n$ |
| ...           | ...           | ...     |
| $C_k$         | $f_k$         | $f_k/n$ |


- Here is another example of a categorical variable **color** that has three categories.

| Category name | Frequency     | Relative Frequency |
|:-------------:|:-------------:|:------------------:|
|  Red   `r emoji('red_circle')`       | 8             | 8/50 = 0.16    |
|  Blue  `r emoji('blue_circle')`       | 26            | 26/50 = 0.52   |
|  Black  `r emoji('black_circle')`      | 16            | 16/50 = 0.32   |


<span style="color:blue"> **Categorical Frequency Table in R** </span>

`loan50`
 
- Below is the `loan50` data set from the openintro package in R.

```{r loan50, highlight.output = c(1, 5)}
# install.packages("openintro")
library(openintro)
str(loan50)
```

<br>

`homeownership`

- The values as well as the frequency table for the variable `homeownership` from the `loan50` data set are shown below.

```{r}
# 50 values (rent, mortgage, own) of categorical homeownership in loan50 data
(x <- loan50$homeownership)
## frequency table
table(x)
```

<br>

:::{.callout-note icon=false}
## If we want to create a frequency table shown in definition, which R data structure we can use?
:::

```{r}
freq <- table(x)
rel_freq <- freq / sum(freq)
cbind(freq, rel_freq)
```

------------------------------------------------------------------------

<span style="color:blue"> **Visualizing a Frequency Table** </span>

<span style="color:red"> ***Bar Chart*** </span>

- Below is a bar chart that visualizes the `homeownership` frequency table.

```{r, echo=-1}
par(mar = c(4, 4, 2, 1))
barplot(height = table(x), main = "Bar Chart", xlab = "Homeownership")
```

<span style="color:red"> ***Pie Chart*** </span>

- The `homeownership` frequency table can also be visualized using a pie chart.

```{r, echo=2}
par(mar = c(0, 0, 1, 0))
pie(x = table(x), main = "Pie Chart")
```


## Frequency Distribution for Numerical Variables

- To create a frequency distribution for numerical variables, one must
  - Divide the data into $k$ **non-overlapping groups of intervals** (**classes**).
  - Convert the data into $k$ categories with an associated **class interval**.
  - Count the number of measurements falling in a given class interval (**class frequency**).

| Class       | Class Interval  | Frequency     | Relative Frequency |
|:-----------:|:---------------:|:-------------:|:------------------:|
| $1$         | $[a_1, a_2]$    | $f_1$          | $f_1/n$ |
| $2$         | $(a_2, a_3]$    | $f_2$          | $f_2/n$ |
| ...         |    ...          | ...            | ...     |
| $k$         | $(a_k, a_{k+1}]$| $f_k$          | $f_k/n$ |

- $(a_2 - a_1) = (a_3 - a_2) = \cdots = (a_{k+1} - a_k)$. **All class widths are the same**!

:::{.callout-note icon=false}
## Can our grade conversion be used for creating a frequency distribution?

- No, because the class widths are not all the same as seen in @fig-grading-scale.
:::


```{r, echo=FALSE, fig.align='center', out.height="100%", purl=FALSE}
#| label: fig-grading-scale
#| fig-cap: Grading scale for this class
letter <- c("A", "A-", "B+", "B", "B-", "C+", "C", "C-",
                       "D+", "D", "F")
percentage <- c("[94, 100]", "[90, 94)", "[87, 90)", "[83, 87)", "[80, 83)",
                "[77, 80)", "[73, 77)", "[70, 73)", 
                "[65, 70)", "[60, 65)", "[0, 60)")
grade_dist <- data.frame(Grade = letter, Percentage = percentage)
library(kableExtra)
knitr::kable(grade_dist, longtable = TRUE, format = "html", align = 'l') %>% kable_styling(position = "center", font_size = 28)
```

-------------------------------------------------------------------

<span style="color:blue"> **Interest Rate Data** `loan50` **[OI]** </span>

- Below is data for the `interest rate` variable in the `loan 50` data set.

```{r}
(int_rate <- round(loan50$interest_rate, 1))
```


```{r, echo=FALSE, out.width="50%", purl=FALSE, fig.align='center'}
knitr::include_graphics("./images/img-data/int_rate.jpeg")
```


<span style="color:red"> ***Frequency Distribution of Interest Rate*** </span>

::::{.columns}
:::{.column width="50%"}
```{r, echo=FALSE, purl=FALSE}
k <- 9
class_width <- 2.5
lower_limit <- 5

class_boundary <- lower_limit + 0:k * class_width
class_int <- paste(paste0(class_boundary[1:k], "%"),
                   paste0(class_boundary[2:(k+1)], "%"), 
                   sep = "-")

freq_info <- hist(int_rate, 
                  breaks = class_boundary, 
                  plot = FALSE)
freq_dist <- data.frame("Class" = as.character(1:k), 
                        "Class_Intvl" = class_int, 
                        "Freq" = freq_info$counts, 
                        "Rel_Freq" = round(freq_info$counts / length(int_rate), 2))
print(freq_dist, row.names = FALSE)
```

```{r}
range(int_rate)
```
:::

:::{.column width="50%"}
- All class widths are the same (2.5%)!
- The number of classes should not be too big or too small.
- The *lower* limit of the 1st class **should not be greater** than the *minimum* value of the data.
  - The lower limit of the 1st class is 5%, which is less than the minimum value of 5.3%.
- The *upper* limit of the last class **should not be smaller** than the *maximum* value of the data.
  - The upper limit of the last class is 27.5%, which is greater than the maximum value of 26.3%.
:::
::::


:::{.callout-note icon=false}
## How do we choose the number of classes or the class width?
R decides the number of classes for us when we visualize the frequency distribution by a **histogram**.
:::

-------------------------------------------------------------------------

<span style="color:blue"> **Visualizing Frequency Distribution by a Histogram** </span>

::::{.columns}
:::{.column width="49%"}

<center>
**Use default breaks (no need to specify)**
</center>

```{r freq_hist, tidy=FALSE, echo=-1, out.width="90%"}
par(mar = c(4, 4, 2, 1))
hist(x = int_rate, 
     xlab = "Interest Rate (%)",
     main = "Hist. of Int. Rate (Defualt)")
```
:::

:::{.column width="2%"}
:::

:::{.column width="49%"}

<center>
**Use customized breaks**
</center>

```{r out.width="90%"}
class_boundary
hist(x = int_rate, 
     breaks = class_boundary, #<<
     xlab = "Interest Rate (%)",
     main = "Hist. of Int. Rate (Ours)")
```
:::
::::


<span style="color:red"> ***Skewness*** </span>

- Key characteristics of distributions include the **shape**, **center** and **spread**.
- Skewness provides a way to summarize the shape of a distribution.

```{r skewness, echo=FALSE, out.width="68%", purl=FALSE, fig.align='center'}
#| label: fig-swewness
#| fig-cap: Distribution characteristics
normal_data <- rnorm(2000)
beta_data_right <- rbeta(2000, 2, 5)
beta_data_left <- rbeta(2000, 5, 2)
normal_data_2 <- rnorm(2000, mean = 5)
par(mfrow = c(2, 2))
par(mar = c(4, 4, 2, 1))
hist(beta_data_right, main = "Skewed to the right", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
hist(normal_data, main = "Symmetric, unimodal", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
hist(beta_data_left, main = "Skewed to the left", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
hist(c(normal_data, normal_data_2), main = "Symmetric, bimodal", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
```

<br>

::::{.columns}
:::{.column width="50%"}

:::{.callout-note icon=false}
## Is the interest rate histogram left skewed or right skewed?
:::

```{r, echo=FALSE, out.width="100%", purl=FALSE}
#| label: fig-histogram
#| fig-cap: Interest Rate Histogram
par(mar = c(4, 4, 2, 1))
par(mfrow = c(1, 1))
hist(x = int_rate, breaks = class_boundary, xlab = "Interest Rate (%)", las = 1,
     main = "Histogram of Interest Rate")
```
:::

:::{.column width="50%"}
```{r, echo=FALSE, out.width="70%",fig.align='center', purl=FALSE}
#| label: fig-skewness-trick
#| fig-cap: Trick for remembering skewness (Biostatistics for the Biological and Health Sciences p.53)
knitr::include_graphics("./images/img-data/skew.png")
```
:::
::::

------------------------------------------------------------------

<span style="color:blue"> **Scatterplot for Two Numerical Variables** </span>

<!-- - We'll learn statistical methods for 2 numerical variables in Week 11. -->
- A **scatterplot** provides a case-by-case view of data for two numerical variables.
- Below is a scatterplot of Loan Amount vs. Total Income from the `loan 50` data.

```{r, out.width="55%", fig.align='center'}
plot(x = loan50$total_income, y = loan50$loan_amount,
     xlab = "Total Income", ylab = "Loan Amount",
     pch = 16, col = 4)
```

## Exercises

In the following, we will be using the data set `mtcars` to do some data summary and graphics. First load the data set into your R session by the command `data(mtcars)`. The data set is like
```{r}
head(mtcars)
```
Please see `?mtcars` for the description of the data set.

1. Use the function `pie()` to create a pie chart for the number of carburetors (`carb`). What the number of carburetors has the most frequencies in the data?

2. Use the function `barplot()` to create a bar chart for the number of cylinders (`cyl`). What the number of cylinders has the most frequencies in the data?

3. Use the function `hist()` to generate a histogram of the gross horsepower (`hp`). Is it right or left-skewed?
    
4. Use the function `plot()` to create a scatter plot of weight (`wt`) vs. miles per gallon (`mpg`). As the weight increases, does the miles per gallon tend to increase or decrease?
