# Data Visualization {#sec-data-graphics}

```{r}
#| echo: false
source("./_common.R")
```

In this chapter, we talk about how to visualize our data using R. We use basic statistical graphics for displaying categorical and numerical data, and showing their frequency distribution graphically. There are various visualization and chart types out there, and data visualization itself could be an one-semester course. [^1] Please google for more online resources.

[^1]: Some references includes <https://r-graph-gallery.com/ggplot2-package.html/> and <https://rkabacoff.github.io/datavis//>. 


The most popular R package for graphics is [`ggplot2`](https://ggplot2.tidyverse.org/) that is one of the packages in the [`tidyverse`](https://www.tidyverse.org/) ecosystem. This book does not use `tidyverse` syntax, and use the default `base` R syntax to do all the statistical computations including graphics. While `tidyverse` is getting popular, and has become the default way of doing data science, the Base R methods still have some advantages, and worth learning for R beginners.  [^2]

[^2]: <https://github.com/matloff/TidyverseSkeptic/>




## Frequency Table for Categorical Variable

For a categorical variable data, we usually summarize its information in terms of a **frequency table (frequency distribution)**[^3] that lists its variable "values" (categories) individually along with their corresponding number of times occurred in the data (**frequencies** or **counts**). Below is a general format of a frequency table for categorical data with $n$ being the total number of data values. It is also called **one-way count table** where one-way refers to one categorical variable being considered in the table. In the table, the variable has $k$ categories, $C_1, \dots, C_k$, and $C_i$ occurs $f_i$ times in the data, $i = 1, \dots, k$. Relative frequency on the right is the proportion of the number of times a category occurs to the total number of data values. Relative frequency is closely related to the idea of probability that is discussed in @sec-prob-define.

| Category name | Frequency     | Relative Frequency |
|:-------------:|:-------------:|:------------------:|
| $C_1$         | $f_1$         | $f_1/n$ |
| $C_2$         | $f_2$         | $f_2/n$ |
| ...           | ...           | ...     |
| $C_k$         | $f_k$         | $f_k/n$ |


[^3]: Although they are exchangeable, for categorical data, I tend to call it frequency table, and I prefer using frequency distribution for numerical data.

We can also make a frequency table with Category and Frequency shown in rows as long as every category and its corresponding counts are correctly shown in the table.

Below is an concrete example of a categorical variable **color** that has three categories.

| Category name | Frequency     | Relative Frequency |
|:-------------:|:-------------:|:------------------:|
|  Red   `r emoji('red_circle')`       | 8             | 8/50 = 0.16    |
|  Blue  `r emoji('blue_circle')`       | 26            | 26/50 = 0.52   |
|  Black  `r emoji('black_circle')`      | 16            | 16/50 = 0.32   |

The relative frequency of "red" tells us that color red appears 16% of the time in the data that has totally $8+26+16 = 50$ objects.


<!-- ### <span style="color:blue"> **Categorical Frequency Table and Graphics in R** </span> -->


::: {.panel-tabset}

## R

Below is the `loan50` data set from the `openintro` package in R. The data set has 50 subjects with 18 variables. We construct a categorical frequency table using the variable `homeownership`.

```{r}
#| echo: true

# install.packages("openintro")
library(openintro)
str(loan50)
```


Note that a categorical variable in R is of either type factor or character. `homeownership` is of type factor that has three categories "rent", "mortgage" and "own". In the code I create another object `x` that stores `homeownership` data.

```{r}
#| echo: true
(x <- loan50$homeownership)
```

We can simply use the function `table()` to create the frequency table for the variable `homeownership`.

```{r}
#| echo: true
## frequency table
table(x)
```

:::{.callout-note icon=false}
## If we want to create a frequency table shown in definition, which R data structure we can use?
:::

The frequency table can be constructed as R matrix. The relative frequency is computed using the count vector `freq` divided by the total number of observations, which is sum of counts of each category. Finally we can combine the frequency and relative frequency together by columns using `cbind()`.


```{r}
#| echo: true
freq <- table(x)
rel_freq <- freq / sum(freq)
cbind(freq, rel_freq)
```


<!-- ------------------------------------------------------------------------ -->

<!-- <span style="color:blue"> **Visualizing a Frequency Table** </span> -->

<span style="color:red"> ***Bar Chart*** </span>

To visualizing the categorical data, we usually turn its frequency table into a plot. Such plot is called the **bar chart**. Each bar stands for one category of the variable, and the height of the bar indicates the frequency. Below is a bar chart that visualizes the `homeownership` frequency table. In R, we use the function `barplot()` to make a bar chart. In the first argument `height`, remember to put the frequency table of our data vector, not the data vector itself. As the basic plotting, we can add the title using `main` argument, and $x$ label using `xlab`.

```{r}
#| echo: !expr -c(1)
par(mar = c(4, 4, 2, 1))
barplot(height = table(x), main = "Bar Chart", xlab = "Homeownership")
```

<span style="color:red"> ***Pie Chart*** </span>

The `homeownership` frequency table can also be visualized using a **pie chart**, especially when we want to see the proportion or distribution of the count of category. In R, simply use `pie()` function with the frequency table as the argument.

```{r, echo=2}
#| echo: !expr -c(1)
par(mar = c(0, 0, 1, 0))
pie(x = table(x), main = "Pie Chart")
```


## Python

Here we demo how create a categorical frequency table in Python. `loan50` data are not in any Python package. It has been saved as a `loan50.csv` file. The extension "csv" stands for "comma-separated values" which is a common text file format that stores data in a table structure.



```{python}
#| echo: true
import pandas as pd
```

To import the `loan50.csv` data into our working session, in Python we can use [`pd.read_csv()`](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html), and provide the information about where we save the data file, or the *file path*, so that Python knows where he can read it. The file path needs to be a string with quote. In my example, the file path starts with a dot, which means *"current working directory"*, whatever it is. The file `loan50.csv` is saved in the data folder under the current working directory.

```{python}
#| echo: true
loan50 = pd.read_csv("./data/loan50.csv")
loan50.info()
```

The `x` that saves the 'homeownership' column is a pd.Series.
```{python}
#| echo: true
# Extract the 'homeownership' column
x = loan50['homeownership']
x
```

In Python, we use [`.value_counts()`](https://pandas.pydata.org/docs/reference/api/pandas.Series.value_counts.html) to obtain the frequency table of a pd.Series.

```{python}
#| echo: true
freq = x.value_counts()
freq
```


```{python}
#| echo: true
# Calculate relative frequency
rel_freq = freq / freq.sum()
rel_freq
```

I save the final frequency table as a pd.DataFrame.

```{python}
#| echo: true
freq_table = pd.DataFrame({'Frequency': freq, 'Relative Frequency': rel_freq})
freq_table
```


<span style="color:red"> ***Bar Chart*** </span>

There are several packages used for plotting in Python. We use [matplotlib](https://matplotlib.org/) for demonstration in the book. Check @sec-py-prog for detailed discussion of plotting using the package. We first import the module pyplot of matplotlib as plt for plotting.

<!-- [seaborn package](https://seaborn.pydata.org/) -->

```{python}
#| echo: true
import matplotlib.pyplot as plt
```


The function [`plt.figure()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html) is used to create a new figure with some pre-specified settings. For example, here we set the figure size having width 5 inches and height 4 inches. The we use [`plt.bar()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar.html) to generate a bar plot, where argument `x` shows the categories, and `height` shows their number of frequencies. Then we add the figure's title and axis labels, and show the plot.



```{python}
#| echo: true
# Bar chart for homeownership
plt.figure(figsize=(5, 4))
plt.bar(x = freq.index, height = freq.values)
plt.title('Bar Chart')
plt.xlabel('Homeownership')
plt.ylabel('Frequency')
plt.show()
```



<span style="color:red"> ***Pie Chart*** </span>

The function `plt.pie()` is used to make a pie chart.

```{python}
#| echo: true
# Pie chart for homeownership
plt.figure(figsize=(5, 4))
plt.pie(x=freq.values, labels=freq.index)
plt.title('Pie Chart')
plt.show()
```

```{python}
#| include: false
# autopct='%1.1f%%'
```

:::

## Frequency Distribution for Numerical Variables

It is not that straightforward as categorical data when we create a frequency distribution for a numerical variable. Categorical variables have natural separated or non-overlapping categories that we can count the number for, but numerical variables don't have such natural divisions. We may have the numerical data so that every data value is shown just once, like $(2.3, 4.5, 4.6, 4.8, 2.8, 5.9)$, and summarizing the data like

```{r}
table(c(2.3, 4.5, 4.6, 4.8, 2.8, 5.9))
```

does not make sense because it does not give us how the data are generally distributed.

In order to create a more meaningful frequency table of numerical data, we first need to divide the data into several groups. Therefore, we are able to see which groups contain more data values than others, and understand the general pattern of the distribution of data.

We sort of convert numerical data into categorical one. The procedure is as follows.

  - Decide the number of *non-overlapping groups of intervals* $k$, or **classes** for dividing the data. The non-overlapping property makes sure that one value belongs one and only one class, like categorical data.
  
  - Convert the data into $k$ categories with an associated **class interval**. We need to know the upper and lower limit of each interval, so that we know which interval or class a data value belongs to.
  
  - Count the number of measurements falling in a given class interval (**class frequency**). After this we know the number of data points falling in each class interval, and this gives us the frequency distribution for a numerical variable.
  
The general format of the frequency distribution of numerical data is shown below.

| Class       | Class Interval  | Frequency     | Relative Frequency |
|:-----------:|:---------------:|:-------------:|:------------------:|
| $1$         | $[a_1, a_2]$    | $f_1$          | $f_1/n$ |
| $2$         | $(a_2, a_3]$    | $f_2$          | $f_2/n$ |
| ...         |    ...          | ...            | ...     |
| $k$         | $(a_k, a_{k+1}]$| $f_k$          | $f_k/n$ |

Note that the interval $[a_1, a_2]$ includes $a_2$, but $(a_2, a_3]$ does not. So if there is a data point having value $a_2$, it is in Class 2, not Class 1. Same logic for other intervals. Such open and closed intervals guarantees the non-overlapping property. 

Notice that *all class widths are the same*! That is, $(a_2 - a_1) = (a_3 - a_2) = \cdots = (a_{k+1} - a_k)$. It is not allowed to have some classes have a larger range of numbers, and some have a smaller range.

:::{.callout-note icon=false}
## Can our grade conversion be used for creating a frequency distribution?
No, because the class widths are not all the same as seen in @fig-grading-scale.
:::


```{r}
#| label: fig-grading-scale
#| fig-cap: Grading scale for this class
#| out-width: 40%
letter <- c("A", "A-", "B+", "B", "B-", "C+", "C", "C-",
                       "D+", "D", "F")
percentage <- c("[94, 100]", "[90, 94)", "[87, 90)", "[83, 87)", "[80, 83)",
                "[77, 80)", "[73, 77)", "[70, 73)", 
                "[65, 70)", "[60, 65)", "[0, 60)")
grade_dist <- data.frame(Grade = letter, Percentage = percentage)
library(kableExtra)
knitr::kable(grade_dist, longtable = TRUE, format = "html", align = 'l') %>% kable_styling(position = "center", font_size = 18)
```

-------------------------------------------------------------------

<span style="color:blue"> **Interest Rate Data** </span>

We use `interest rate` variable in the `loan 50` data set for demonstrating frequency distribution and graphics for numerical data.

::::{.columns}
:::{.column width="78%"}

::: {.panel-tabset}

## R
```{r}
#| echo: true
int_rate <- round(loan50$interest_rate, 1)
int_rate
```

## Python

```{python}
#| echo: true
# Round the interest rates to one decimal place
int_rate = loan50['interest_rate'].round(1)
int_rate
```

:::

:::

:::{.column width="2%"}

:::

:::{.column width="20%"}

<br>

```{r}
#| fig-cap: "Source: Unsplash-Markus Spiske"
knitr::include_graphics("./images/img-data/int_rate.jpeg")
```
:::
::::

<span style="color:red"> ***Frequency Distribution of Interest Rate*** </span>


<!-- ::::{.columns} -->
<!-- :::{.column width="50%"} -->


::: {.panel-tabset}

## Frequency Distribution by R
A frequency distribution of the interest rate data is created using R and shown below.

```{r}
k <- 9
class_width <- 2.5
lower_limit <- 5

class_boundary <- lower_limit + 0:k * class_width
class_int <- paste(paste0(class_boundary[1:k], "%"),
                   paste0(class_boundary[2:(k+1)], "%"), 
                   sep = " - ")

freq_info <- hist(int_rate, 
                  breaks = class_boundary, 
                  plot = FALSE)
freq_dist <- data.frame("Class" = as.character(1:k), 
                        "Class_Intvl" = class_int, 
                        "Freq" = freq_info$counts, 
                        "Rel_Freq" = round(freq_info$counts / length(int_rate), 2))
print(freq_dist, row.names = FALSE)
```
## R Code
```{r}
#| echo: true
#| eval: false

# Define class intervals for histogram
k <- 9
class_width <- 2.5
lower_limit <- 5
# Calculate class boundaries
class_boundary <- lower_limit + 0:k * class_width

# Create class intervals as strings for display
class_int <- paste(paste0(class_boundary[1:k], "%"),
                   paste0(class_boundary[2:(k+1)], "%"), 
                   sep = " - ")

# Calculate frequency distribution without plotting
freq_info <- hist(int_rate, 
                  breaks = class_boundary, 
                  plot = FALSE)

# Create a data frame for frequency distribution
freq_dist <- data.frame(
  "Class" = as.character(1:k), 
  "Class_Intvl" = class_int, 
  "Freq" = freq_info$counts, 
  "Rel_Freq" = round(freq_info$counts / length(int_rate), 2))

print(freq_dist, row.names = FALSE)
```

## Frequency Distribution by Python
A frequency distribution of the interest rate data is created using Python and shown below.

```{python}
import numpy as np
# Define class intervals for histogram
k = 9
class_width = 2.5
lower_limit = 5
# Calculate class boundaries
class_boundary = lower_limit + np.arange(0, k+1) * class_width

# Create class intervals as strings for display
class_int = [f"{class_boundary[i]}% - {class_boundary[i+1]}%" for i in range(k)]

# Calculate frequency distribution without plotting
freq_info, bin_edges = np.histogram(int_rate, bins=class_boundary)

# Create a DataFrame for frequency distribution
freq_dist = pd.DataFrame({
    "Class": [str(i+1) for i in range(k)],
    "Class_Intvl": class_int,
    "Freq": freq_info,
    "Rel_Freq": (freq_info / len(int_rate)).round(2)
})

freq_dist
```
## Python Code
```{python}
#| echo: true
#| eval: false
import numpy as np
# Define class intervals for histogram
k = 9
class_width = 2.5
lower_limit = 5
# Calculate class boundaries
class_boundary = lower_limit + np.arange(0, k+1) * class_width

# Create class intervals as strings for display
class_int = [f"{class_boundary[i]}% - {class_boundary[i+1]}%" for i in range(k)]

# Calculate frequency distribution without plotting
freq_info, bin_edges = np.histogram(int_rate, bins=class_boundary)

# Create a DataFrame for frequency distribution
freq_dist = pd.DataFrame({
    "Class": [str(i+1) for i in range(k)],
    "Class_Intvl": class_int,
    "Freq": freq_info,
    "Rel_Freq": (freq_info / len(int_rate)).round(2)
})
freq_dist
```

:::

<!-- ::: -->

<!-- :::{.column width="50%"} -->

First, all class widths are the same with the length 2.5\%. Here, the number of classes $k = 9$. $k$ should not be too big or too small, and choosing $k$ is subjective and depends on the research need. Too big $k$ put too many different values together in the same class, and some important features may be masked. On the other hand, when $k$ is too small, there may be many classes having one or few data points only, and general pattern of data becomes unclear. A simple rule is to choose $k$ between 5 and 30, then tune the value a little bit to get the best presentation result. Or the number of classes $k$ can be calculated from a suggested class width $\approx \frac{\text{max} - \text{min}}{k}$.

::: {.panel-tabset}

## R

```{r}
#| echo: true
# min and max value
range(int_rate)
```

## Python
```{python}
#| echo: true
# min and max value
(int_rate.min(), int_rate.max())
```

:::

The *lower* limit of the 1st class *should not be greater* than the *minimum* value of the data. Otherwise we are gonna miss some data values because the values are out of the any intervals, and the counts are incorrect. The lower limit of the 1st class is 5%, which is less than the minimum value of 5.3%. The *upper* limit of the last class *should not be smaller* than the *maximum* value of the data. The upper limit of the last class is 27.5%, which is greater than the maximum value of 26.3%. The idea is the class intervals should cover all the data values, so that when we classify or count them, we don't miss any value in the table.
  
  


<!-- ::: -->
<!-- :::: -->


:::{.callout-note icon=false}
## How do we choose the number of classes or the class width?
R decides the number of classes for us when we visualize the frequency distribution by a **histogram**.
:::

-------------------------------------------------------------------------

<span style="color:blue"> **Visualizing Frequency Distribution by a Histogram** </span>

<!-- ::::{.columns} -->
<!-- :::{.column width="49%"} -->


To visualize a frequency distribution of numerical data, we use a **histogram**. Each bar or column in the plot stands for one class or **bin** in the frequency distribution, and the height shows the frequency of a column. Unlike bar charts, all the bins in the histogram are connected each other with no gaps.



::: {.panel-tabset}

## R

In R, we use the command `hist()` to make a histogram. The only required argument is `x` at which we put our data. If we don't specify how the data are divided into classes, R does it for us. The histogram below is the histogram of the interest rate data using the default **class breaks**, the boundary values separating class intervals.

<!-- The breaks or number of classes R chooses for us may or may not satisfy us. nclass.Sturges(x) nclass.scott(x) nclass.FD(x) -->

<!-- <center> -->
<!-- **Use default breaks (no need to specify)** -->
<!-- </center> -->

```{r}
#| echo: true
hist(x = int_rate, 
     xlab = "Interest Rate (%)",
     main = "Hist. of Int. Rate (Defualt)")
```

If we don't like the default one, we can specify customized breaks in the argument `breaks`. The `class_boundary` object saves the class boundaries used in the previous frequency distribution. The histogram corresponding the frequency distribution is shown below. Note that when our customized breaks are used, we can see the count in the 7.5%-10% interval is more than the count in the 5%-7.5% interval. This information cannot be obtained when the default breaks are used.


```{r}
#| echo: true
class_boundary
hist(x = int_rate, 
     breaks = class_boundary, #<<
     xlab = "Interest Rate (%)",
     main = "Hist. of Int. Rate (Ours)")
```

Sometimes specifying all the lower and upper limits might be tedious. The argument `breaks` allows a single number too, giving the number of classes $k$ for the histogram, `breaks = 10` for example. Sometimes the histogram won't have the number of classes exactly the same as the number specified in `breaks`. It's just an approximated one.

## Python

In Python, we use the command [`plt.hist()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html) to make a histogram. The only required argument is `x` at which we put our data. If we don't specify how the data are divided into classes, Python does it for us. The histogram below is the histogram of the interest rate data using the default **class breaks**, the boundary values separating class intervals.


```{python}
#| echo: true
plt.hist(x = int_rate)
plt.xlabel('Interest Rate (%)')
plt.title('Hist. of Int. Rate (Defualt)')
plt.show()
```


If we don't like the default one, we can specify customized breaks in the argument `bins`. The `class_boundary` object saves the class boundaries used in the previous frequency distribution. The histogram corresponding the frequency distribution is shown below.

```{python}
#| echo: true
class_boundary
plt.hist(int_rate, bins=class_boundary)
plt.xlabel('Interest Rate (%)')
plt.title('Hist. of Int. Rate (Ours)')
plt.show()
```

:::



<!-- ::: -->
<!-- :::: -->




<span style="color:red"> ***Skewness*** </span>

We've learned to plot a frequency distribution. Let's learn to describe it, and see if there is any interesting pattern contained in the data. Some key characteristics of distributions include **shape**, **center** and **dispersion**. **Skewness** provides a way to summarize the shape of a distribution.

@fig-swewness illustrates skewness of distribution. When the distribution has a long right (left) tail, we say the distribution is skewed to the right (left), or it is right (left)-skewed. A right (left)-skewed distribution is also called positively (negatively) skewed. The distribution is said to be symmetric when the left side of the distribution mirrors the right side without being skewed. If you fold the distribution along the y axis, the right and left parts of the distribution will coincide.

```{r}
#| label: fig-swewness
#| fig-cap: Distribution characteristics
#| out-width: 100%
normal_data <- rnorm(2000)
beta_data_right <- rbeta(2000, 2, 5)
beta_data_left <- rbeta(2000, 5, 2)
normal_data_2 <- rnorm(2000, mean = 5)
par(mfrow = c(2, 2))
par(mar = c(4, 4, 2, 1))
hist(beta_data_right, main = "Skewed to the right", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
hist(normal_data, main = "Symmetric, unimodal", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
hist(beta_data_left, main = "Skewed to the left", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
hist(c(normal_data, normal_data_2), main = "Symmetric, bimodal", xlab = "x", 
     col = "blue", border = "white", breaks = 20)
```

<!-- <br> -->


Find it hard to memorize the right skewed or left skewed? @fig-skewness-trick provides a good trick to learn the skewness that you will never forget. Just think of your feet. The right (left) skewed distribution resembles toes on right (left) foot. I hope the shape of your feet looks like the feet in the picture!


::::{.columns}
:::{.column width="50%"}

:::{.callout-note icon=false}
## Is the interest rate histogram left skewed or right skewed?
:::

```{r}
#| label: fig-histogram
#| fig-cap: Interest Rate Histogram
par(mar = c(4, 4, 2, 1))
par(mfrow = c(1, 1))
hist(x = int_rate, breaks = class_boundary, xlab = "Interest Rate (%)", las = 1,
     main = "Histogram of Interest Rate")
```
:::

:::{.column width="50%"}
```{r}
#| label: fig-skewness-trick
#| fig-cap: Trick for remembering skewness (Biostatistics for the Biological and Health Sciences p.53)
#| out-width: 100%
knitr::include_graphics("./images/img-data/skew.png")
```
:::
::::

------------------------------------------------------------------

<span style="color:blue"> **Scatterplot for Two Numerical Variables** </span>

<!-- - We'll learn statistical methods for 2 numerical variables in Week 11. -->

A **scatterplot** provides a case-by-case view of data for two numerical variables. $X$ axis represents one variable and $Y$ axis stands for the other. The data value $(x, y)$ pair is plotted as a point in the $X$-$Y$ a Cartesian coordinate plane, where $x$ is the value of one variable, and $y$ is the value of the other for a case. Below is a scatterplot of Loan Amount vs. Total Income from the `loan 50` data.


::: {.panel-tabset}

## R
To create a scatter plot in R, we use the command `plot()` and put the two variables' data in the `x` and `y` arguments. Their length should be identical.

```{r}
#| echo: true
plot(x = loan50$total_income, y = loan50$loan_amount,
     xlab = "Total Income", ylab = "Loan Amount",
     main = "Loan Amount vs Total Income",
     pch = 16, col = 4)
```

## Python

To create a scatter plot in Python, we use the command [`plt.scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html) and put the two variables' data in the `x` and `y` arguments. Their length should be identical.


```{python}
#| echo: true
plt.scatter(x = loan50['total_income'], y = loan50['loan_amount'], 
            color='blue', marker='o')
plt.xlabel('Total Income')
plt.ylabel('Loan Amount')
plt.title('Loan Amount vs Total Income')
plt.show()
```

:::


More details about scatterplot and statistical methods for 2 numerical variables are discussed in @sec-model-reg.


## Exercises

In the following, we will be using the data set `mtcars` to do some data summary and graphics. First load the data set into your R session by the command `data(mtcars)`. The data set is like
```{r}
head(mtcars)
```
Please see `?mtcars` for the description of the data set.

1. Use the function `pie()` to create a pie chart for the number of carburetors (`carb`). What the number of carburetors has the most frequencies in the data?

2. Use the function `barplot()` to create a bar chart for the number of cylinders (`cyl`). What the number of cylinders has the most frequencies in the data?

3. Use the function `hist()` to generate a histogram of the gross horsepower (`hp`). Is it right or left-skewed?
    
4. Use the function `plot()` to create a scatter plot of weight (`wt`) vs. miles per gallon (`mpg`). As the weight increases, does the miles per gallon tend to increase or decrease?
